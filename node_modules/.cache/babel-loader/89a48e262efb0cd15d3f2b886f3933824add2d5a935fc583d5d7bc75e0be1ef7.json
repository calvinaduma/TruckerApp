{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar _tslib = require('./_virtual/_tslib.js');\nvar types = require('./types.js');\nvar actionTypes = require('./actionTypes.js');\nvar utils = require('./utils.js');\nvar environment = require('./environment.js');\nvar initEvent = /*#__PURE__*/utils.toSCXMLEvent({\n  type: actionTypes.init\n});\nfunction getActionFunction(actionType, actionFunctionMap) {\n  return actionFunctionMap ? actionFunctionMap[actionType] || undefined : undefined;\n}\nfunction toActionObject(action, actionFunctionMap) {\n  var actionObject;\n  if (utils.isString(action) || typeof action === 'number') {\n    var exec = getActionFunction(action, actionFunctionMap);\n    if (utils.isFunction(exec)) {\n      actionObject = {\n        type: action,\n        exec: exec\n      };\n    } else if (exec) {\n      actionObject = exec;\n    } else {\n      actionObject = {\n        type: action,\n        exec: undefined\n      };\n    }\n  } else if (utils.isFunction(action)) {\n    actionObject = {\n      // Convert action to string if unnamed\n      type: action.name || action.toString(),\n      exec: action\n    };\n  } else {\n    var exec = getActionFunction(action.type, actionFunctionMap);\n    if (utils.isFunction(exec)) {\n      actionObject = _tslib.__assign(_tslib.__assign({}, action), {\n        exec: exec\n      });\n    } else if (exec) {\n      var actionType = exec.type || action.type;\n      actionObject = _tslib.__assign(_tslib.__assign(_tslib.__assign({}, exec), action), {\n        type: actionType\n      });\n    } else {\n      actionObject = action;\n    }\n  }\n  return actionObject;\n}\nvar toActionObjects = function toActionObjects(action, actionFunctionMap) {\n  if (!action) {\n    return [];\n  }\n  var actions = utils.isArray(action) ? action : [action];\n  return actions.map(function (subAction) {\n    return toActionObject(subAction, actionFunctionMap);\n  });\n};\nfunction toActivityDefinition(action) {\n  var actionObject = toActionObject(action);\n  return _tslib.__assign(_tslib.__assign({\n    id: utils.isString(action) ? action : actionObject.id\n  }, actionObject), {\n    type: actionObject.type\n  });\n}\n/**\r\n * Raises an event. This places the event in the internal event queue, so that\r\n * the event is immediately consumed by the machine in the current step.\r\n *\r\n * @param eventType The event to raise.\r\n */\n\nfunction raise(event) {\n  if (!utils.isString(event)) {\n    return send(event, {\n      to: types.SpecialTargets.Internal\n    });\n  }\n  return {\n    type: actionTypes.raise,\n    event: event\n  };\n}\nfunction resolveRaise(action) {\n  return {\n    type: actionTypes.raise,\n    _event: utils.toSCXMLEvent(action.event)\n  };\n}\n/**\r\n * Sends an event. This returns an action that will be read by an interpreter to\r\n * send the event in the next step, after the current step is finished executing.\r\n *\r\n * @param event The event to send.\r\n * @param options Options to pass into the send event:\r\n *  - `id` - The unique send event identifier (used with `cancel()`).\r\n *  - `delay` - The number of milliseconds to delay the sending of the event.\r\n *  - `to` - The target of this event (by default, the machine the event was sent from).\r\n */\n\nfunction send(event, options) {\n  return {\n    to: options ? options.to : undefined,\n    type: actionTypes.send,\n    event: utils.isFunction(event) ? event : utils.toEventObject(event),\n    delay: options ? options.delay : undefined,\n    id: options && options.id !== undefined ? options.id : utils.isFunction(event) ? event.name : utils.getEventType(event)\n  };\n}\nfunction resolveSend(action, ctx, _event, delaysMap) {\n  var meta = {\n    _event: _event\n  }; // TODO: helper function for resolving Expr\n\n  var resolvedEvent = utils.toSCXMLEvent(utils.isFunction(action.event) ? action.event(ctx, _event.data, meta) : action.event);\n  var resolvedDelay;\n  if (utils.isString(action.delay)) {\n    var configDelay = delaysMap && delaysMap[action.delay];\n    resolvedDelay = utils.isFunction(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;\n  } else {\n    resolvedDelay = utils.isFunction(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;\n  }\n  var resolvedTarget = utils.isFunction(action.to) ? action.to(ctx, _event.data, meta) : action.to;\n  return _tslib.__assign(_tslib.__assign({}, action), {\n    to: resolvedTarget,\n    _event: resolvedEvent,\n    event: resolvedEvent.data,\n    delay: resolvedDelay\n  });\n}\n/**\r\n * Sends an event to this machine's parent.\r\n *\r\n * @param event The event to send to the parent machine.\r\n * @param options Options to pass into the send event.\r\n */\n\nfunction sendParent(event, options) {\n  return send(event, _tslib.__assign(_tslib.__assign({}, options), {\n    to: types.SpecialTargets.Parent\n  }));\n}\n/**\r\n * Sends an event to an actor.\r\n *\r\n * @param actor The `ActorRef` to send the event to.\r\n * @param event The event to send, or an expression that evaluates to the event to send\r\n * @param options Send action options\r\n * @returns An XState send action object\r\n */\n\nfunction sendTo(actor, event, options) {\n  return send(event, _tslib.__assign(_tslib.__assign({}, options), {\n    to: actor\n  }));\n}\n/**\r\n * Sends an update event to this machine's parent.\r\n */\n\nfunction sendUpdate() {\n  return sendParent(actionTypes.update);\n}\n/**\r\n * Sends an event back to the sender of the original event.\r\n *\r\n * @param event The event to send back to the sender\r\n * @param options Options to pass into the send event\r\n */\n\nfunction respond(event, options) {\n  return send(event, _tslib.__assign(_tslib.__assign({}, options), {\n    to: function to(_, __, _a) {\n      var _event = _a._event;\n      return _event.origin; // TODO: handle when _event.origin is undefined\n    }\n  }));\n}\n\nvar defaultLogExpr = function defaultLogExpr(context, event) {\n  return {\n    context: context,\n    event: event\n  };\n};\n/**\r\n *\r\n * @param expr The expression function to evaluate which will be logged.\r\n *  Takes in 2 arguments:\r\n *  - `ctx` - the current state context\r\n *  - `event` - the event that caused this action to be executed.\r\n * @param label The label to give to the logged expression.\r\n */\n\nfunction log(expr, label) {\n  if (expr === void 0) {\n    expr = defaultLogExpr;\n  }\n  return {\n    type: actionTypes.log,\n    label: label,\n    expr: expr\n  };\n}\nvar resolveLog = function resolveLog(action, ctx, _event) {\n  return _tslib.__assign(_tslib.__assign({}, action), {\n    value: utils.isString(action.expr) ? action.expr : action.expr(ctx, _event.data, {\n      _event: _event\n    })\n  });\n};\n/**\r\n * Cancels an in-flight `send(...)` action. A canceled sent action will not\r\n * be executed, nor will its event be sent, unless it has already been sent\r\n * (e.g., if `cancel(...)` is called after the `send(...)` action's `delay`).\r\n *\r\n * @param sendId The `id` of the `send(...)` action to cancel.\r\n */\n\nvar cancel = function cancel(sendId) {\n  return {\n    type: actionTypes.cancel,\n    sendId: sendId\n  };\n};\n/**\r\n * Starts an activity.\r\n *\r\n * @param activity The activity to start.\r\n */\n\nfunction start(activity) {\n  var activityDef = toActivityDefinition(activity);\n  return {\n    type: types.ActionTypes.Start,\n    activity: activityDef,\n    exec: undefined\n  };\n}\n/**\r\n * Stops an activity.\r\n *\r\n * @param actorRef The activity to stop.\r\n */\n\nfunction stop(actorRef) {\n  var activity = utils.isFunction(actorRef) ? actorRef : toActivityDefinition(actorRef);\n  return {\n    type: types.ActionTypes.Stop,\n    activity: activity,\n    exec: undefined\n  };\n}\nfunction resolveStop(action, context, _event) {\n  var actorRefOrString = utils.isFunction(action.activity) ? action.activity(context, _event.data) : action.activity;\n  var resolvedActorRef = typeof actorRefOrString === 'string' ? {\n    id: actorRefOrString\n  } : actorRefOrString;\n  var actionObject = {\n    type: types.ActionTypes.Stop,\n    activity: resolvedActorRef\n  };\n  return actionObject;\n}\n/**\r\n * Updates the current context of the machine.\r\n *\r\n * @param assignment An object that represents the partial context to update.\r\n */\n\nvar assign = function assign(assignment) {\n  return {\n    type: actionTypes.assign,\n    assignment: assignment\n  };\n};\nfunction isActionObject(action) {\n  return typeof action === 'object' && 'type' in action;\n}\n/**\r\n * Returns an event type that represents an implicit event that\r\n * is sent after the specified `delay`.\r\n *\r\n * @param delayRef The delay in milliseconds\r\n * @param id The state node ID where this event is handled\r\n */\n\nfunction after(delayRef, id) {\n  var idSuffix = id ? \"#\".concat(id) : '';\n  return \"\".concat(types.ActionTypes.After, \"(\").concat(delayRef, \")\").concat(idSuffix);\n}\n/**\r\n * Returns an event that represents that a final state node\r\n * has been reached in the parent state node.\r\n *\r\n * @param id The final state node's parent state node `id`\r\n * @param data The data to pass into the event\r\n */\n\nfunction done(id, data) {\n  var type = \"\".concat(types.ActionTypes.DoneState, \".\").concat(id);\n  var eventObject = {\n    type: type,\n    data: data\n  };\n  eventObject.toString = function () {\n    return type;\n  };\n  return eventObject;\n}\n/**\r\n * Returns an event that represents that an invoked service has terminated.\r\n *\r\n * An invoked service is terminated when it has reached a top-level final state node,\r\n * but not when it is canceled.\r\n *\r\n * @param id The final state node ID\r\n * @param data The data to pass into the event\r\n */\n\nfunction doneInvoke(id, data) {\n  var type = \"\".concat(types.ActionTypes.DoneInvoke, \".\").concat(id);\n  var eventObject = {\n    type: type,\n    data: data\n  };\n  eventObject.toString = function () {\n    return type;\n  };\n  return eventObject;\n}\nfunction error(id, data) {\n  var type = \"\".concat(types.ActionTypes.ErrorPlatform, \".\").concat(id);\n  var eventObject = {\n    type: type,\n    data: data\n  };\n  eventObject.toString = function () {\n    return type;\n  };\n  return eventObject;\n}\nfunction pure(getActions) {\n  return {\n    type: types.ActionTypes.Pure,\n    get: getActions\n  };\n}\n/**\r\n * Forwards (sends) an event to a specified service.\r\n *\r\n * @param target The target service to forward the event to.\r\n * @param options Options to pass into the send action creator.\r\n */\n\nfunction forwardTo(target, options) {\n  if (!environment.IS_PRODUCTION && (!target || typeof target === 'function')) {\n    var originalTarget_1 = target;\n    target = function target() {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      var resolvedTarget = typeof originalTarget_1 === 'function' ? originalTarget_1.apply(void 0, _tslib.__spreadArray([], _tslib.__read(args), false)) : originalTarget_1;\n      if (!resolvedTarget) {\n        throw new Error(\"Attempted to forward event to undefined actor. This risks an infinite loop in the sender.\");\n      }\n      return resolvedTarget;\n    };\n  }\n  return send(function (_, event) {\n    return event;\n  }, _tslib.__assign(_tslib.__assign({}, options), {\n    to: target\n  }));\n}\n/**\r\n * Escalates an error by sending it as an event to this machine's parent.\r\n *\r\n * @param errorData The error data to send, or the expression function that\r\n * takes in the `context`, `event`, and `meta`, and returns the error data to send.\r\n * @param options Options to pass into the send action creator.\r\n */\n\nfunction escalate(errorData, options) {\n  return sendParent(function (context, event, meta) {\n    return {\n      type: actionTypes.error,\n      data: utils.isFunction(errorData) ? errorData(context, event, meta) : errorData\n    };\n  }, _tslib.__assign(_tslib.__assign({}, options), {\n    to: types.SpecialTargets.Parent\n  }));\n}\nfunction choose(conds) {\n  return {\n    type: types.ActionTypes.Choose,\n    conds: conds\n  };\n}\nvar pluckAssigns = function pluckAssigns(actionBlocks) {\n  var e_1, _a;\n  var assignActions = [];\n  try {\n    for (var actionBlocks_1 = _tslib.__values(actionBlocks), actionBlocks_1_1 = actionBlocks_1.next(); !actionBlocks_1_1.done; actionBlocks_1_1 = actionBlocks_1.next()) {\n      var block = actionBlocks_1_1.value;\n      var i = 0;\n      while (i < block.length) {\n        if (block[i].type === actionTypes.assign) {\n          assignActions.push(block[i]);\n          block.splice(i, 1);\n          continue;\n        }\n        i++;\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (actionBlocks_1_1 && !actionBlocks_1_1.done && (_a = actionBlocks_1.return)) _a.call(actionBlocks_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  return assignActions;\n};\nfunction resolveActions(machine, currentState, currentContext, _event, actionBlocks, predictableExec, preserveActionOrder) {\n  if (preserveActionOrder === void 0) {\n    preserveActionOrder = false;\n  }\n  var assignActions = preserveActionOrder ? [] : pluckAssigns(actionBlocks);\n  var updatedContext = assignActions.length ? utils.updateContext(currentContext, _event, assignActions, currentState) : currentContext;\n  var preservedContexts = preserveActionOrder ? [currentContext] : undefined;\n  var deferredToBlockEnd = [];\n  function handleAction(actionObject) {\n    var _a;\n    switch (actionObject.type) {\n      case actionTypes.raise:\n        {\n          return resolveRaise(actionObject);\n        }\n      case actionTypes.send:\n        var sendAction = resolveSend(actionObject, updatedContext, _event, machine.options.delays); // TODO: fix ActionTypes.Init\n\n        if (!environment.IS_PRODUCTION) {\n          // warn after resolving as we can create better contextual message here\n          utils.warn(!utils.isString(actionObject.delay) || typeof sendAction.delay === 'number',\n          // tslint:disable-next-line:max-line-length\n          \"No delay reference for delay expression '\".concat(actionObject.delay, \"' was found on machine '\").concat(machine.id, \"'\"));\n        }\n        if (predictableExec && sendAction.to !== types.SpecialTargets.Internal) {\n          deferredToBlockEnd.push(sendAction);\n        }\n        return sendAction;\n      case actionTypes.log:\n        {\n          var resolved = resolveLog(actionObject, updatedContext, _event);\n          predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(resolved, updatedContext, _event);\n          return resolved;\n        }\n      case actionTypes.choose:\n        {\n          var chooseAction = actionObject;\n          var matchedActions = (_a = chooseAction.conds.find(function (condition) {\n            var guard = utils.toGuard(condition.cond, machine.options.guards);\n            return !guard || utils.evaluateGuard(machine, guard, updatedContext, _event, !predictableExec ? currentState : undefined);\n          })) === null || _a === void 0 ? void 0 : _a.actions;\n          if (!matchedActions) {\n            return [];\n          }\n          var _b = _tslib.__read(resolveActions(machine, currentState, updatedContext, _event, [toActionObjects(utils.toArray(matchedActions), machine.options.actions)], predictableExec, preserveActionOrder), 2),\n            resolvedActionsFromChoose = _b[0],\n            resolvedContextFromChoose = _b[1];\n          updatedContext = resolvedContextFromChoose;\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          return resolvedActionsFromChoose;\n        }\n      case actionTypes.pure:\n        {\n          var matchedActions = actionObject.get(updatedContext, _event.data);\n          if (!matchedActions) {\n            return [];\n          }\n          var _c = _tslib.__read(resolveActions(machine, currentState, updatedContext, _event, [toActionObjects(utils.toArray(matchedActions), machine.options.actions)], predictableExec, preserveActionOrder), 2),\n            resolvedActionsFromPure = _c[0],\n            resolvedContext = _c[1];\n          updatedContext = resolvedContext;\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          return resolvedActionsFromPure;\n        }\n      case actionTypes.stop:\n        {\n          var resolved = resolveStop(actionObject, updatedContext, _event);\n          predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(resolved, currentContext, _event);\n          return resolved;\n        }\n      case actionTypes.assign:\n        {\n          updatedContext = utils.updateContext(updatedContext, _event, [actionObject], !predictableExec ? currentState : undefined);\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          break;\n        }\n      default:\n        var resolvedActionObject = toActionObject(actionObject, machine.options.actions);\n        var exec_1 = resolvedActionObject.exec;\n        if (predictableExec) {\n          predictableExec(resolvedActionObject, updatedContext, _event);\n        } else if (exec_1 && preservedContexts) {\n          var contextIndex_1 = preservedContexts.length - 1;\n          resolvedActionObject = _tslib.__assign(_tslib.__assign({}, resolvedActionObject), {\n            exec: function exec(_ctx) {\n              var args = [];\n              for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n              }\n              exec_1.apply(void 0, _tslib.__spreadArray([preservedContexts[contextIndex_1]], _tslib.__read(args), false));\n            }\n          });\n        }\n        return resolvedActionObject;\n    }\n  }\n  function processBlock(block) {\n    var e_2, _a;\n    var resolvedActions = [];\n    try {\n      for (var block_1 = _tslib.__values(block), block_1_1 = block_1.next(); !block_1_1.done; block_1_1 = block_1.next()) {\n        var action = block_1_1.value;\n        var resolved = handleAction(action);\n        if (resolved) {\n          resolvedActions = resolvedActions.concat(resolved);\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (block_1_1 && !block_1_1.done && (_a = block_1.return)) _a.call(block_1);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n    deferredToBlockEnd.forEach(function (action) {\n      predictableExec(action, updatedContext, _event);\n    });\n    deferredToBlockEnd.length = 0;\n    return resolvedActions;\n  }\n  var resolvedActions = utils.flatten(actionBlocks.map(processBlock));\n  return [resolvedActions, updatedContext];\n}\nexports.actionTypes = actionTypes;\nexports.after = after;\nexports.assign = assign;\nexports.cancel = cancel;\nexports.choose = choose;\nexports.done = done;\nexports.doneInvoke = doneInvoke;\nexports.error = error;\nexports.escalate = escalate;\nexports.forwardTo = forwardTo;\nexports.getActionFunction = getActionFunction;\nexports.initEvent = initEvent;\nexports.isActionObject = isActionObject;\nexports.log = log;\nexports.pure = pure;\nexports.raise = raise;\nexports.resolveActions = resolveActions;\nexports.resolveLog = resolveLog;\nexports.resolveRaise = resolveRaise;\nexports.resolveSend = resolveSend;\nexports.resolveStop = resolveStop;\nexports.respond = respond;\nexports.send = send;\nexports.sendParent = sendParent;\nexports.sendTo = sendTo;\nexports.sendUpdate = sendUpdate;\nexports.start = start;\nexports.stop = stop;\nexports.toActionObject = toActionObject;\nexports.toActionObjects = toActionObjects;\nexports.toActivityDefinition = toActivityDefinition;","map":{"version":3,"names":["Object","defineProperty","exports","value","_tslib","require","types","actionTypes","utils","environment","initEvent","toSCXMLEvent","type","init","getActionFunction","actionType","actionFunctionMap","undefined","toActionObject","action","actionObject","isString","exec","isFunction","name","toString","__assign","toActionObjects","actions","isArray","map","subAction","toActivityDefinition","id","raise","event","send","to","SpecialTargets","Internal","resolveRaise","_event","options","toEventObject","delay","getEventType","resolveSend","ctx","delaysMap","meta","resolvedEvent","data","resolvedDelay","configDelay","resolvedTarget","sendParent","Parent","sendTo","actor","sendUpdate","update","respond","_","__","_a","origin","defaultLogExpr","context","log","expr","label","resolveLog","cancel","sendId","start","activity","activityDef","ActionTypes","Start","stop","actorRef","Stop","resolveStop","actorRefOrString","resolvedActorRef","assign","assignment","isActionObject","after","delayRef","idSuffix","concat","After","done","DoneState","eventObject","doneInvoke","DoneInvoke","error","ErrorPlatform","pure","getActions","Pure","get","forwardTo","target","IS_PRODUCTION","originalTarget_1","args","_i","arguments","length","apply","__spreadArray","__read","Error","escalate","errorData","choose","conds","Choose","pluckAssigns","actionBlocks","e_1","assignActions","actionBlocks_1","__values","actionBlocks_1_1","next","block","i","push","splice","e_1_1","return","call","resolveActions","machine","currentState","currentContext","predictableExec","preserveActionOrder","updatedContext","updateContext","preservedContexts","deferredToBlockEnd","handleAction","sendAction","delays","warn","resolved","chooseAction","matchedActions","find","condition","guard","toGuard","cond","guards","evaluateGuard","_b","toArray","resolvedActionsFromChoose","resolvedContextFromChoose","_c","resolvedActionsFromPure","resolvedContext","resolvedActionObject","exec_1","contextIndex_1","_ctx","processBlock","e_2","resolvedActions","block_1","block_1_1","e_2_1","forEach","flatten"],"sources":["/Users/carterbrewer/Downloads/trucker_app-main/node_modules/xstate/lib/actions.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar _tslib = require('./_virtual/_tslib.js');\nvar types = require('./types.js');\nvar actionTypes = require('./actionTypes.js');\nvar utils = require('./utils.js');\nvar environment = require('./environment.js');\n\nvar initEvent = /*#__PURE__*/utils.toSCXMLEvent({\n  type: actionTypes.init\n});\nfunction getActionFunction(actionType, actionFunctionMap) {\n  return actionFunctionMap ? actionFunctionMap[actionType] || undefined : undefined;\n}\nfunction toActionObject(action, actionFunctionMap) {\n  var actionObject;\n\n  if (utils.isString(action) || typeof action === 'number') {\n    var exec = getActionFunction(action, actionFunctionMap);\n\n    if (utils.isFunction(exec)) {\n      actionObject = {\n        type: action,\n        exec: exec\n      };\n    } else if (exec) {\n      actionObject = exec;\n    } else {\n      actionObject = {\n        type: action,\n        exec: undefined\n      };\n    }\n  } else if (utils.isFunction(action)) {\n    actionObject = {\n      // Convert action to string if unnamed\n      type: action.name || action.toString(),\n      exec: action\n    };\n  } else {\n    var exec = getActionFunction(action.type, actionFunctionMap);\n\n    if (utils.isFunction(exec)) {\n      actionObject = _tslib.__assign(_tslib.__assign({}, action), {\n        exec: exec\n      });\n    } else if (exec) {\n      var actionType = exec.type || action.type;\n      actionObject = _tslib.__assign(_tslib.__assign(_tslib.__assign({}, exec), action), {\n        type: actionType\n      });\n    } else {\n      actionObject = action;\n    }\n  }\n\n  return actionObject;\n}\nvar toActionObjects = function (action, actionFunctionMap) {\n  if (!action) {\n    return [];\n  }\n\n  var actions = utils.isArray(action) ? action : [action];\n  return actions.map(function (subAction) {\n    return toActionObject(subAction, actionFunctionMap);\n  });\n};\nfunction toActivityDefinition(action) {\n  var actionObject = toActionObject(action);\n  return _tslib.__assign(_tslib.__assign({\n    id: utils.isString(action) ? action : actionObject.id\n  }, actionObject), {\n    type: actionObject.type\n  });\n}\n/**\r\n * Raises an event. This places the event in the internal event queue, so that\r\n * the event is immediately consumed by the machine in the current step.\r\n *\r\n * @param eventType The event to raise.\r\n */\n\nfunction raise(event) {\n  if (!utils.isString(event)) {\n    return send(event, {\n      to: types.SpecialTargets.Internal\n    });\n  }\n\n  return {\n    type: actionTypes.raise,\n    event: event\n  };\n}\nfunction resolveRaise(action) {\n  return {\n    type: actionTypes.raise,\n    _event: utils.toSCXMLEvent(action.event)\n  };\n}\n/**\r\n * Sends an event. This returns an action that will be read by an interpreter to\r\n * send the event in the next step, after the current step is finished executing.\r\n *\r\n * @param event The event to send.\r\n * @param options Options to pass into the send event:\r\n *  - `id` - The unique send event identifier (used with `cancel()`).\r\n *  - `delay` - The number of milliseconds to delay the sending of the event.\r\n *  - `to` - The target of this event (by default, the machine the event was sent from).\r\n */\n\nfunction send(event, options) {\n  return {\n    to: options ? options.to : undefined,\n    type: actionTypes.send,\n    event: utils.isFunction(event) ? event : utils.toEventObject(event),\n    delay: options ? options.delay : undefined,\n    id: options && options.id !== undefined ? options.id : utils.isFunction(event) ? event.name : utils.getEventType(event)\n  };\n}\nfunction resolveSend(action, ctx, _event, delaysMap) {\n  var meta = {\n    _event: _event\n  }; // TODO: helper function for resolving Expr\n\n  var resolvedEvent = utils.toSCXMLEvent(utils.isFunction(action.event) ? action.event(ctx, _event.data, meta) : action.event);\n  var resolvedDelay;\n\n  if (utils.isString(action.delay)) {\n    var configDelay = delaysMap && delaysMap[action.delay];\n    resolvedDelay = utils.isFunction(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;\n  } else {\n    resolvedDelay = utils.isFunction(action.delay) ? action.delay(ctx, _event.data, meta) : action.delay;\n  }\n\n  var resolvedTarget = utils.isFunction(action.to) ? action.to(ctx, _event.data, meta) : action.to;\n  return _tslib.__assign(_tslib.__assign({}, action), {\n    to: resolvedTarget,\n    _event: resolvedEvent,\n    event: resolvedEvent.data,\n    delay: resolvedDelay\n  });\n}\n/**\r\n * Sends an event to this machine's parent.\r\n *\r\n * @param event The event to send to the parent machine.\r\n * @param options Options to pass into the send event.\r\n */\n\nfunction sendParent(event, options) {\n  return send(event, _tslib.__assign(_tslib.__assign({}, options), {\n    to: types.SpecialTargets.Parent\n  }));\n}\n/**\r\n * Sends an event to an actor.\r\n *\r\n * @param actor The `ActorRef` to send the event to.\r\n * @param event The event to send, or an expression that evaluates to the event to send\r\n * @param options Send action options\r\n * @returns An XState send action object\r\n */\n\nfunction sendTo(actor, event, options) {\n  return send(event, _tslib.__assign(_tslib.__assign({}, options), {\n    to: actor\n  }));\n}\n/**\r\n * Sends an update event to this machine's parent.\r\n */\n\nfunction sendUpdate() {\n  return sendParent(actionTypes.update);\n}\n/**\r\n * Sends an event back to the sender of the original event.\r\n *\r\n * @param event The event to send back to the sender\r\n * @param options Options to pass into the send event\r\n */\n\nfunction respond(event, options) {\n  return send(event, _tslib.__assign(_tslib.__assign({}, options), {\n    to: function (_, __, _a) {\n      var _event = _a._event;\n      return _event.origin; // TODO: handle when _event.origin is undefined\n    }\n  }));\n}\n\nvar defaultLogExpr = function (context, event) {\n  return {\n    context: context,\n    event: event\n  };\n};\n/**\r\n *\r\n * @param expr The expression function to evaluate which will be logged.\r\n *  Takes in 2 arguments:\r\n *  - `ctx` - the current state context\r\n *  - `event` - the event that caused this action to be executed.\r\n * @param label The label to give to the logged expression.\r\n */\n\n\nfunction log(expr, label) {\n  if (expr === void 0) {\n    expr = defaultLogExpr;\n  }\n\n  return {\n    type: actionTypes.log,\n    label: label,\n    expr: expr\n  };\n}\nvar resolveLog = function (action, ctx, _event) {\n  return _tslib.__assign(_tslib.__assign({}, action), {\n    value: utils.isString(action.expr) ? action.expr : action.expr(ctx, _event.data, {\n      _event: _event\n    })\n  });\n};\n/**\r\n * Cancels an in-flight `send(...)` action. A canceled sent action will not\r\n * be executed, nor will its event be sent, unless it has already been sent\r\n * (e.g., if `cancel(...)` is called after the `send(...)` action's `delay`).\r\n *\r\n * @param sendId The `id` of the `send(...)` action to cancel.\r\n */\n\nvar cancel = function (sendId) {\n  return {\n    type: actionTypes.cancel,\n    sendId: sendId\n  };\n};\n/**\r\n * Starts an activity.\r\n *\r\n * @param activity The activity to start.\r\n */\n\nfunction start(activity) {\n  var activityDef = toActivityDefinition(activity);\n  return {\n    type: types.ActionTypes.Start,\n    activity: activityDef,\n    exec: undefined\n  };\n}\n/**\r\n * Stops an activity.\r\n *\r\n * @param actorRef The activity to stop.\r\n */\n\nfunction stop(actorRef) {\n  var activity = utils.isFunction(actorRef) ? actorRef : toActivityDefinition(actorRef);\n  return {\n    type: types.ActionTypes.Stop,\n    activity: activity,\n    exec: undefined\n  };\n}\nfunction resolveStop(action, context, _event) {\n  var actorRefOrString = utils.isFunction(action.activity) ? action.activity(context, _event.data) : action.activity;\n  var resolvedActorRef = typeof actorRefOrString === 'string' ? {\n    id: actorRefOrString\n  } : actorRefOrString;\n  var actionObject = {\n    type: types.ActionTypes.Stop,\n    activity: resolvedActorRef\n  };\n  return actionObject;\n}\n/**\r\n * Updates the current context of the machine.\r\n *\r\n * @param assignment An object that represents the partial context to update.\r\n */\n\nvar assign = function (assignment) {\n  return {\n    type: actionTypes.assign,\n    assignment: assignment\n  };\n};\nfunction isActionObject(action) {\n  return typeof action === 'object' && 'type' in action;\n}\n/**\r\n * Returns an event type that represents an implicit event that\r\n * is sent after the specified `delay`.\r\n *\r\n * @param delayRef The delay in milliseconds\r\n * @param id The state node ID where this event is handled\r\n */\n\nfunction after(delayRef, id) {\n  var idSuffix = id ? \"#\".concat(id) : '';\n  return \"\".concat(types.ActionTypes.After, \"(\").concat(delayRef, \")\").concat(idSuffix);\n}\n/**\r\n * Returns an event that represents that a final state node\r\n * has been reached in the parent state node.\r\n *\r\n * @param id The final state node's parent state node `id`\r\n * @param data The data to pass into the event\r\n */\n\nfunction done(id, data) {\n  var type = \"\".concat(types.ActionTypes.DoneState, \".\").concat(id);\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\n/**\r\n * Returns an event that represents that an invoked service has terminated.\r\n *\r\n * An invoked service is terminated when it has reached a top-level final state node,\r\n * but not when it is canceled.\r\n *\r\n * @param id The final state node ID\r\n * @param data The data to pass into the event\r\n */\n\nfunction doneInvoke(id, data) {\n  var type = \"\".concat(types.ActionTypes.DoneInvoke, \".\").concat(id);\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\nfunction error(id, data) {\n  var type = \"\".concat(types.ActionTypes.ErrorPlatform, \".\").concat(id);\n  var eventObject = {\n    type: type,\n    data: data\n  };\n\n  eventObject.toString = function () {\n    return type;\n  };\n\n  return eventObject;\n}\nfunction pure(getActions) {\n  return {\n    type: types.ActionTypes.Pure,\n    get: getActions\n  };\n}\n/**\r\n * Forwards (sends) an event to a specified service.\r\n *\r\n * @param target The target service to forward the event to.\r\n * @param options Options to pass into the send action creator.\r\n */\n\nfunction forwardTo(target, options) {\n  if (!environment.IS_PRODUCTION && (!target || typeof target === 'function')) {\n    var originalTarget_1 = target;\n\n    target = function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      var resolvedTarget = typeof originalTarget_1 === 'function' ? originalTarget_1.apply(void 0, _tslib.__spreadArray([], _tslib.__read(args), false)) : originalTarget_1;\n\n      if (!resolvedTarget) {\n        throw new Error(\"Attempted to forward event to undefined actor. This risks an infinite loop in the sender.\");\n      }\n\n      return resolvedTarget;\n    };\n  }\n\n  return send(function (_, event) {\n    return event;\n  }, _tslib.__assign(_tslib.__assign({}, options), {\n    to: target\n  }));\n}\n/**\r\n * Escalates an error by sending it as an event to this machine's parent.\r\n *\r\n * @param errorData The error data to send, or the expression function that\r\n * takes in the `context`, `event`, and `meta`, and returns the error data to send.\r\n * @param options Options to pass into the send action creator.\r\n */\n\nfunction escalate(errorData, options) {\n  return sendParent(function (context, event, meta) {\n    return {\n      type: actionTypes.error,\n      data: utils.isFunction(errorData) ? errorData(context, event, meta) : errorData\n    };\n  }, _tslib.__assign(_tslib.__assign({}, options), {\n    to: types.SpecialTargets.Parent\n  }));\n}\nfunction choose(conds) {\n  return {\n    type: types.ActionTypes.Choose,\n    conds: conds\n  };\n}\n\nvar pluckAssigns = function (actionBlocks) {\n  var e_1, _a;\n\n  var assignActions = [];\n\n  try {\n    for (var actionBlocks_1 = _tslib.__values(actionBlocks), actionBlocks_1_1 = actionBlocks_1.next(); !actionBlocks_1_1.done; actionBlocks_1_1 = actionBlocks_1.next()) {\n      var block = actionBlocks_1_1.value;\n      var i = 0;\n\n      while (i < block.length) {\n        if (block[i].type === actionTypes.assign) {\n          assignActions.push(block[i]);\n          block.splice(i, 1);\n          continue;\n        }\n\n        i++;\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (actionBlocks_1_1 && !actionBlocks_1_1.done && (_a = actionBlocks_1.return)) _a.call(actionBlocks_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  return assignActions;\n};\n\nfunction resolveActions(machine, currentState, currentContext, _event, actionBlocks, predictableExec, preserveActionOrder) {\n  if (preserveActionOrder === void 0) {\n    preserveActionOrder = false;\n  }\n\n  var assignActions = preserveActionOrder ? [] : pluckAssigns(actionBlocks);\n  var updatedContext = assignActions.length ? utils.updateContext(currentContext, _event, assignActions, currentState) : currentContext;\n  var preservedContexts = preserveActionOrder ? [currentContext] : undefined;\n  var deferredToBlockEnd = [];\n\n  function handleAction(actionObject) {\n    var _a;\n\n    switch (actionObject.type) {\n      case actionTypes.raise:\n        {\n          return resolveRaise(actionObject);\n        }\n\n      case actionTypes.send:\n        var sendAction = resolveSend(actionObject, updatedContext, _event, machine.options.delays); // TODO: fix ActionTypes.Init\n\n        if (!environment.IS_PRODUCTION) {\n          // warn after resolving as we can create better contextual message here\n          utils.warn(!utils.isString(actionObject.delay) || typeof sendAction.delay === 'number', // tslint:disable-next-line:max-line-length\n          \"No delay reference for delay expression '\".concat(actionObject.delay, \"' was found on machine '\").concat(machine.id, \"'\"));\n        }\n\n        if (predictableExec && sendAction.to !== types.SpecialTargets.Internal) {\n          deferredToBlockEnd.push(sendAction);\n        }\n\n        return sendAction;\n\n      case actionTypes.log:\n        {\n          var resolved = resolveLog(actionObject, updatedContext, _event);\n          predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(resolved, updatedContext, _event);\n          return resolved;\n        }\n\n      case actionTypes.choose:\n        {\n          var chooseAction = actionObject;\n          var matchedActions = (_a = chooseAction.conds.find(function (condition) {\n            var guard = utils.toGuard(condition.cond, machine.options.guards);\n            return !guard || utils.evaluateGuard(machine, guard, updatedContext, _event, !predictableExec ? currentState : undefined);\n          })) === null || _a === void 0 ? void 0 : _a.actions;\n\n          if (!matchedActions) {\n            return [];\n          }\n\n          var _b = _tslib.__read(resolveActions(machine, currentState, updatedContext, _event, [toActionObjects(utils.toArray(matchedActions), machine.options.actions)], predictableExec, preserveActionOrder), 2),\n              resolvedActionsFromChoose = _b[0],\n              resolvedContextFromChoose = _b[1];\n\n          updatedContext = resolvedContextFromChoose;\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          return resolvedActionsFromChoose;\n        }\n\n      case actionTypes.pure:\n        {\n          var matchedActions = actionObject.get(updatedContext, _event.data);\n\n          if (!matchedActions) {\n            return [];\n          }\n\n          var _c = _tslib.__read(resolveActions(machine, currentState, updatedContext, _event, [toActionObjects(utils.toArray(matchedActions), machine.options.actions)], predictableExec, preserveActionOrder), 2),\n              resolvedActionsFromPure = _c[0],\n              resolvedContext = _c[1];\n\n          updatedContext = resolvedContext;\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          return resolvedActionsFromPure;\n        }\n\n      case actionTypes.stop:\n        {\n          var resolved = resolveStop(actionObject, updatedContext, _event);\n          predictableExec === null || predictableExec === void 0 ? void 0 : predictableExec(resolved, currentContext, _event);\n          return resolved;\n        }\n\n      case actionTypes.assign:\n        {\n          updatedContext = utils.updateContext(updatedContext, _event, [actionObject], !predictableExec ? currentState : undefined);\n          preservedContexts === null || preservedContexts === void 0 ? void 0 : preservedContexts.push(updatedContext);\n          break;\n        }\n\n      default:\n        var resolvedActionObject = toActionObject(actionObject, machine.options.actions);\n        var exec_1 = resolvedActionObject.exec;\n\n        if (predictableExec) {\n          predictableExec(resolvedActionObject, updatedContext, _event);\n        } else if (exec_1 && preservedContexts) {\n          var contextIndex_1 = preservedContexts.length - 1;\n          resolvedActionObject = _tslib.__assign(_tslib.__assign({}, resolvedActionObject), {\n            exec: function (_ctx) {\n              var args = [];\n\n              for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n              }\n\n              exec_1.apply(void 0, _tslib.__spreadArray([preservedContexts[contextIndex_1]], _tslib.__read(args), false));\n            }\n          });\n        }\n\n        return resolvedActionObject;\n    }\n  }\n\n  function processBlock(block) {\n    var e_2, _a;\n\n    var resolvedActions = [];\n\n    try {\n      for (var block_1 = _tslib.__values(block), block_1_1 = block_1.next(); !block_1_1.done; block_1_1 = block_1.next()) {\n        var action = block_1_1.value;\n        var resolved = handleAction(action);\n\n        if (resolved) {\n          resolvedActions = resolvedActions.concat(resolved);\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (block_1_1 && !block_1_1.done && (_a = block_1.return)) _a.call(block_1);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    deferredToBlockEnd.forEach(function (action) {\n      predictableExec(action, updatedContext, _event);\n    });\n    deferredToBlockEnd.length = 0;\n    return resolvedActions;\n  }\n\n  var resolvedActions = utils.flatten(actionBlocks.map(processBlock));\n  return [resolvedActions, updatedContext];\n}\n\nexports.actionTypes = actionTypes;\nexports.after = after;\nexports.assign = assign;\nexports.cancel = cancel;\nexports.choose = choose;\nexports.done = done;\nexports.doneInvoke = doneInvoke;\nexports.error = error;\nexports.escalate = escalate;\nexports.forwardTo = forwardTo;\nexports.getActionFunction = getActionFunction;\nexports.initEvent = initEvent;\nexports.isActionObject = isActionObject;\nexports.log = log;\nexports.pure = pure;\nexports.raise = raise;\nexports.resolveActions = resolveActions;\nexports.resolveLog = resolveLog;\nexports.resolveRaise = resolveRaise;\nexports.resolveSend = resolveSend;\nexports.resolveStop = resolveStop;\nexports.respond = respond;\nexports.send = send;\nexports.sendParent = sendParent;\nexports.sendTo = sendTo;\nexports.sendUpdate = sendUpdate;\nexports.start = start;\nexports.stop = stop;\nexports.toActionObject = toActionObject;\nexports.toActionObjects = toActionObjects;\nexports.toActivityDefinition = toActivityDefinition;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}