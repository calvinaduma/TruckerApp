{"ast":null,"code":"import _toConsumableArray from \"/Users/carterbrewer/Downloads/trucker_app-main/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _regeneratorRuntime from \"/Users/carterbrewer/Downloads/trucker_app-main/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"/Users/carterbrewer/Downloads/trucker_app-main/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/carterbrewer/Downloads/trucker_app-main/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport maplibregl from \"maplibre-gl\";\nimport { Geo } from \"@aws-amplify/geo\";\nimport { drawGeofences } from \"../drawGeofences\";\nimport { isValidGeofenceId, getGeofenceFeatureFromPolygon, getGeofenceFeatureArray, isExistingGeofenceId, getDistanceBetweenCoordinates } from \"../geofenceUtils\";\nimport { GEOFENCE_COLOR, GEOFENCE_BORDER_COLOR } from \"../constants\";\nimport { AmplifyGeofenceControlUI } from \"./ui\";\nimport { AmplifyMapDraw } from \"./AmplifyMapDraw\";\nimport { createElement } from \"../utils\";\nvar FIT_BOUNDS_PADDING = {\n  left: 240\n}; // Default to 240px right now because of the left nav\nexport var AmplifyGeofenceControl = /*#__PURE__*/function () {\n  function AmplifyGeofenceControl(options) {\n    _classCallCheck(this, AmplifyGeofenceControl);\n    this._geofenceCollectionId = options === null || options === void 0 ? void 0 : options.geofenceCollectionId;\n    this._loadedGeofences = {};\n    this._displayedGeofences = [];\n    this.changeMode = this.changeMode.bind(this);\n    this.loadInitialGeofences = this.loadInitialGeofences.bind(this);\n    this.loadMoreGeofences = this.loadMoreGeofences.bind(this);\n    this._loadGeofence = this._loadGeofence.bind(this);\n    this.updateInputRadius = this.updateInputRadius.bind(this);\n    this.saveGeofence = this.saveGeofence.bind(this);\n    this.editGeofence = this.editGeofence.bind(this);\n    this.deleteGeofence = this.deleteGeofence.bind(this);\n    this.displayAllGeofences = this.displayAllGeofences.bind(this);\n    this.hideAllGeofences = this.hideAllGeofences.bind(this);\n    this.addEditableGeofence = this.addEditableGeofence.bind(this);\n    this.setEditingModeEnabled = this.setEditingModeEnabled.bind(this);\n    this.displayHighlightedGeofence = this.displayHighlightedGeofence.bind(this);\n    this.hideHighlightedGeofence = this.hideHighlightedGeofence.bind(this);\n    this.displayGeofence = this.displayGeofence.bind(this);\n    this.hideGeofence = this.hideGeofence.bind(this);\n    this.fitGeofence = this.fitGeofence.bind(this);\n    this.fitAllGeofences = this.fitAllGeofences.bind(this);\n  }\n  /**********************************************************************\n   Public Methods for AmplifyGeofenceControl\n   **********************************************************************/\n  _createClass(AmplifyGeofenceControl, [{\n    key: \"getDefaultPosition\",\n    value: function getDefaultPosition() {\n      return \"full-screen\";\n    }\n  }, {\n    key: \"onRemove\",\n    value: function onRemove() {\n      this._ui.removeElement(this._container);\n    }\n    // Reorders MapLibre canvas class names to fix a mapbox draw bug - https://github.com/mapbox/mapbox-gl-draw/pull/1079\n  }, {\n    key: \"reorderMapLibreClassNames\",\n    value: function reorderMapLibreClassNames() {\n      var mapCanvas = document.getElementsByClassName(\"maplibregl-canvas\").item(0);\n      if (mapCanvas) {\n        mapCanvas.className = \"mapboxgl-canvas maplibregl-canvas\";\n      }\n    }\n  }, {\n    key: \"onAdd\",\n    value: function onAdd(map) {\n      var _this = this;\n      this._map = map;\n      this.reorderMapLibreClassNames();\n      this._container = createElement(\"div\", \"geofence-ctrl maplibregl-ctrl\");\n      this._ui = AmplifyGeofenceControlUI(this, this._container);\n      this._amplifyDraw = new AmplifyMapDraw(map, this._ui);\n      this._ui.registerControlPosition(map, \"full-screen\");\n      this._ui.createGeofenceListContainer();\n      // Draw the geofences source to the map so we can update it on geofences load/creation\n      this._map.once(\"load\", function () {\n        // Prevents warnings on multiple re-renders, especially when rendered in react\n        if (this._map.getSource(\"displayedGeofences\")) {\n          return;\n        }\n        this._drawGeofencesOutput = drawGeofences(\"displayedGeofences\", [], this._map, {\n          fillColor: GEOFENCE_COLOR,\n          borderColor: GEOFENCE_BORDER_COLOR,\n          borderOpacity: 1\n        });\n        this._highlightedGeofenceOutput = drawGeofences(\"highlightedGeofence\", [], this._map, {\n          fillColor: GEOFENCE_COLOR,\n          borderColor: GEOFENCE_BORDER_COLOR,\n          borderOpacity: 1,\n          borderWidth: 6\n        });\n        this.loadInitialGeofences();\n        map.addControl(new maplibregl.NavigationControl({\n          showCompass: false\n        }), \"bottom-right\");\n      }.bind(this));\n      this._map.on(\"draw.update\", function () {\n        var coordinates = _this._amplifyDraw._mapBoxDraw.getAll().features[0].geometry.coordinates[0];\n        var radius = getDistanceBetweenCoordinates(coordinates[0], coordinates[Math.floor(coordinates.length / 2)]) / 2;\n        _this._ui.updateGeofenceRadius(radius.toFixed(2));\n      });\n      return this._container;\n    }\n  }, {\n    key: \"createGeofence\",\n    value: function createGeofence(geofenceId) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(!geofenceId || geofenceId.length === 0)) {\n                  _context.next = 3;\n                  break;\n                }\n                this._ui.createAddGeofencePromptError(\"Geofence ID is empty.\");\n                return _context.abrupt(\"return\");\n              case 3:\n                if (isValidGeofenceId(geofenceId)) {\n                  _context.next = 6;\n                  break;\n                }\n                this._ui.createAddGeofencePromptError(\"Geofence ID contains special characters.\");\n                return _context.abrupt(\"return\");\n              case 6:\n                if (!isExistingGeofenceId(geofenceId, this._loadedGeofences)) {\n                  _context.next = 9;\n                  break;\n                }\n                this._ui.createAddGeofencePromptError(\"Geofence ID already exists.\");\n                return _context.abrupt(\"return\");\n              case 9:\n                return _context.abrupt(\"return\", this.saveGeofence(geofenceId));\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"saveGeofence\",\n    value: function saveGeofence(geofenceId) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var feature, idToSave, response, err, success, savedGeofence;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                feature = this._amplifyDraw.get(this._editingGeofenceId);\n                idToSave = geofenceId || this._editingGeofenceId;\n                _context2.next = 4;\n                return Geo.saveGeofences({\n                  geofenceId: idToSave,\n                  geometry: {\n                    polygon: feature.geometry[\"coordinates\"]\n                  }\n                });\n              case 4:\n                response = _context2.sent;\n                if (!response.errors[0]) {\n                  _context2.next = 8;\n                  break;\n                }\n                err = response.errors[0];\n                throw new Error(\"There was an error saving geofence with id \".concat(idToSave, \": \").concat(err.error.code, \" - \").concat(err.error.message));\n              case 8:\n                success = response.successes[0];\n                savedGeofence = {\n                  geofenceId: success.geofenceId,\n                  geometry: {\n                    polygon: feature.geometry[\"coordinates\"]\n                  }\n                }; // render geofence to the map and add it to the list\n                this._loadGeofence(savedGeofence);\n                this.displayGeofence(savedGeofence.geofenceId);\n                this.setEditingModeEnabled(false);\n                return _context2.abrupt(\"return\", savedGeofence.geofenceId);\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n    // Each page loads 100 geofences\n  }, {\n    key: \"loadInitialGeofences\",\n    value: function loadInitialGeofences() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var _yield$Geo$listGeofen, entries, nextToken, loadGeofence;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return Geo.listGeofences();\n              case 3:\n                _yield$Geo$listGeofen = _context3.sent;\n                entries = _yield$Geo$listGeofen.entries;\n                nextToken = _yield$Geo$listGeofen.nextToken;\n                this._listGeofencesNextToken = nextToken;\n                loadGeofence = this._loadGeofence;\n                entries.forEach(function (geofence) {\n                  return loadGeofence(geofence);\n                });\n                this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n                _context3.next = 15;\n                break;\n              case 12:\n                _context3.prev = 12;\n                _context3.t0 = _context3[\"catch\"](0);\n                throw new Error(\"Error calling listGeofences: \".concat(_context3.t0));\n              case 15:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 12]]);\n      }));\n    }\n  }, {\n    key: \"loadMoreGeofences\",\n    value: function loadMoreGeofences() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var _yield$Geo$listGeofen2, entries, nextToken, loadGeofence;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!this._listGeofencesNextToken) {\n                  _context4.next = 16;\n                  break;\n                }\n                _context4.prev = 1;\n                _context4.next = 4;\n                return Geo.listGeofences({\n                  nextToken: this._listGeofencesNextToken\n                });\n              case 4:\n                _yield$Geo$listGeofen2 = _context4.sent;\n                entries = _yield$Geo$listGeofen2.entries;\n                nextToken = _yield$Geo$listGeofen2.nextToken;\n                this._listGeofencesNextToken = nextToken;\n                loadGeofence = this._loadGeofence;\n                entries.forEach(function (geofence) {\n                  return loadGeofence(geofence);\n                });\n                this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n                _context4.next = 16;\n                break;\n              case 13:\n                _context4.prev = 13;\n                _context4.t0 = _context4[\"catch\"](1);\n                throw new Error(\"Error calling listGeofences: \".concat(_context4.t0));\n              case 16:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[1, 13]]);\n      }));\n    }\n  }, {\n    key: \"editGeofence\",\n    value: function editGeofence(geofenceId) {\n      this.setEditingModeEnabled(true);\n      var geofence = this._loadedGeofences[geofenceId];\n      if (!geofence) {\n        throw new Error(\"Geofence with id \".concat(geofenceId, \" does not exist\"));\n      }\n      // render in mapboxdraw\n      var feature = getGeofenceFeatureFromPolygon(geofence.geometry.polygon);\n      var data = Object.assign({\n        id: geofence.geofenceId\n      }, feature);\n      this._amplifyDraw.add(data);\n      this._editingGeofenceId = geofence.geofenceId;\n    }\n  }, {\n    key: \"deleteGeofence\",\n    value: function deleteGeofence(geofenceId) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var response, err;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return Geo.deleteGeofences(geofenceId);\n              case 2:\n                response = _context5.sent;\n                if (!response.errors[0]) {\n                  _context5.next = 6;\n                  break;\n                }\n                err = response.errors[0].error;\n                throw new Error(\"There was an error deleting geofence with id \".concat(geofenceId, \": \").concat(err.code, \" - \").concat(err.message));\n              case 6:\n                this._ui.removeGeofenceListItem(geofenceId);\n                delete this._loadedGeofences[geofenceId];\n                this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n                this._displayedGeofences = this._displayedGeofences.filter(function (geofence) {\n                  return geofence.geofenceId !== geofenceId;\n                });\n                this._updateDisplayedGeofences();\n                return _context5.abrupt(\"return\", geofenceId);\n              case 12:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n  }, {\n    key: \"deleteSelectedGeofences\",\n    value: function deleteSelectedGeofences() {\n      var _this2 = this;\n      var idsToDelete = this._displayedGeofences.map(function (fence) {\n        return fence.geofenceId;\n      });\n      // FIXME: delete geofence api call here\n      idsToDelete.forEach(function (id) {\n        _this2._ui.removeGeofenceListItem(id);\n        delete _this2._loadedGeofences[id];\n      });\n      this._displayedGeofences = [];\n      this._updateDisplayedGeofences();\n    }\n    /**********************************************************************\n     Private methods for CRUD Geofences\n     **********************************************************************/\n  }, {\n    key: \"_loadGeofence\",\n    value: function _loadGeofence(geofence) {\n      // If geofence exists remove it from displayed geofences\n      if (this._loadedGeofences[geofence.geofenceId]) {\n        this._displayedGeofences = this._displayedGeofences.filter(function (fence) {\n          return fence.geofenceId !== geofence.geofenceId;\n        });\n      } else {\n        // If geofence doesn't exist render a new list item for it\n        this._ui.renderListItem(geofence);\n      }\n      this._loadedGeofences[geofence.geofenceId] = geofence;\n      this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n    }\n  }, {\n    key: \"displayGeofence\",\n    value: function displayGeofence(geofenceId) {\n      this._displayedGeofences.push(this._loadedGeofences[geofenceId]);\n      this._updateDisplayedGeofences();\n      this._ui.updateCheckbox(geofenceId, true);\n      this.fitAllGeofences();\n    }\n  }, {\n    key: \"displayAllGeofences\",\n    value: function displayAllGeofences() {\n      var _this$_displayedGeofe,\n        _this3 = this;\n      (_this$_displayedGeofe = this._displayedGeofences).push.apply(_this$_displayedGeofe, _toConsumableArray(Object.values(this._loadedGeofences)));\n      this._updateDisplayedGeofences();\n      var checkboxes = document.getElementsByClassName(\"geofence-ctrl-list-item-checkbox\");\n      Array.from(checkboxes).forEach(function (checkbox) {\n        return checkbox.checked = _this3._ui.getCheckboxAllValue();\n      });\n      this.fitAllGeofences();\n    }\n  }, {\n    key: \"fitGeofence\",\n    value: function fitGeofence(geofenceId) {\n      var mapBounds = this._map.getBounds();\n      var geofence = this._loadedGeofences[geofenceId];\n      geofence.geometry.polygon[0].forEach(function (coord) {\n        mapBounds.extend(coord);\n      });\n      this._map.fitBounds(mapBounds, {\n        padding: FIT_BOUNDS_PADDING\n      });\n    }\n  }, {\n    key: \"fitAllGeofences\",\n    value: function fitAllGeofences() {\n      var shouldFitBounds = false;\n      var mapBounds = this._map.getBounds();\n      this._displayedGeofences.forEach(function (geofence) {\n        geofence.geometry.polygon[0].forEach(function (coord) {\n          if (!mapBounds.contains(coord)) {\n            mapBounds.extend(coord);\n            shouldFitBounds = true;\n          }\n        });\n      });\n      if (shouldFitBounds) this._map.fitBounds(mapBounds, {\n        padding: FIT_BOUNDS_PADDING\n      });\n    }\n  }, {\n    key: \"hideGeofence\",\n    value: function hideGeofence(geofenceId) {\n      this._displayedGeofences = this._displayedGeofences.filter(function (geofence) {\n        return geofence.geofenceId !== geofenceId;\n      });\n      this._updateDisplayedGeofences();\n      this._ui.updateCheckbox(geofenceId, false);\n    }\n  }, {\n    key: \"hideAllGeofences\",\n    value: function hideAllGeofences() {\n      var _this4 = this;\n      this._displayedGeofences = [];\n      this._updateDisplayedGeofences();\n      var checkboxes = document.getElementsByClassName(\"geofence-ctrl-list-item-checkbox\");\n      Array.from(checkboxes).forEach(function (checkbox) {\n        return checkbox.checked = _this4._ui.getCheckboxAllValue();\n      });\n    }\n  }, {\n    key: \"_updateDisplayedGeofences\",\n    value: function _updateDisplayedGeofences() {\n      var feature = getGeofenceFeatureArray(this._displayedGeofences);\n      this._drawGeofencesOutput.setData(feature);\n    }\n  }, {\n    key: \"displayHighlightedGeofence\",\n    value: function displayHighlightedGeofence(geofenceId) {\n      var geofence = this._loadedGeofences[geofenceId];\n      if (!geofence) {\n        console.warn(\"Geofence with id \".concat(geofenceId, \" does not exist\"));\n        return;\n      }\n      var feature = getGeofenceFeatureFromPolygon(geofence.geometry.polygon);\n      this._highlightedGeofenceOutput.setData(feature);\n      this._highlightedGeofenceOutput.show();\n    }\n  }, {\n    key: \"hideHighlightedGeofence\",\n    value: function hideHighlightedGeofence() {\n      this._highlightedGeofenceOutput.hide();\n    }\n    /**********************************************************************\n     Methods for controlling amplify mapbox draw\n     **********************************************************************/\n  }, {\n    key: \"changeMode\",\n    value: function changeMode(mode) {\n      // erase existing mapbox draw content\n      this._amplifyDraw.delete(this._editingGeofenceId);\n      if (mode === \"draw_circle\") {\n        this._amplifyDraw.drawCircularGeofence(this._editingGeofenceId);\n      } else {\n        this._amplifyDraw.drawPolygonGeofence(this._editingGeofenceId);\n      }\n    }\n  }, {\n    key: \"resetGeofence\",\n    value: function resetGeofence() {\n      // erase existing mapbox draw content\n      this._amplifyDraw.delete(this._editingGeofenceId);\n      if (isExistingGeofenceId(this._editingGeofenceId, this._loadedGeofences)) {\n        this.editGeofence(this._editingGeofenceId);\n      } else {\n        this._amplifyDraw.drawPolygonGeofence(this._editingGeofenceId);\n      }\n    }\n    // Disables add button and selecting items from geofence list\n  }, {\n    key: \"setEditingModeEnabled\",\n    value: function setEditingModeEnabled(enabled) {\n      enabled ? this._amplifyDraw.enable() : this._amplifyDraw.disable();\n      enabled ? this._drawGeofencesOutput.hide() : this._drawGeofencesOutput.show();\n      this._ui.setGeofenceListEnabled(!enabled);\n    }\n  }, {\n    key: \"updateInputRadius\",\n    value: function updateInputRadius(event) {\n      var radiusString = event.target.value;\n      var radius = parseInt(radiusString);\n      if (isNaN(radius)) {\n        return;\n      }\n      this._amplifyDraw.drawCircularGeofence(this._editingGeofenceId, radius);\n    }\n  }, {\n    key: \"addEditableGeofence\",\n    value: function addEditableGeofence() {\n      this._editingGeofenceId = \"tempGeofence\";\n      this._amplifyDraw.drawCircularGeofence(\"tempGeofence\");\n      this.setEditingModeEnabled(true);\n    }\n  }]);\n  return AmplifyGeofenceControl;\n}();","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","maplibregl","Geo","drawGeofences","isValidGeofenceId","getGeofenceFeatureFromPolygon","getGeofenceFeatureArray","isExistingGeofenceId","getDistanceBetweenCoordinates","GEOFENCE_COLOR","GEOFENCE_BORDER_COLOR","AmplifyGeofenceControlUI","AmplifyMapDraw","createElement","FIT_BOUNDS_PADDING","left","AmplifyGeofenceControl","options","_geofenceCollectionId","geofenceCollectionId","_loadedGeofences","_displayedGeofences","changeMode","bind","loadInitialGeofences","loadMoreGeofences","_loadGeofence","updateInputRadius","saveGeofence","editGeofence","deleteGeofence","displayAllGeofences","hideAllGeofences","addEditableGeofence","setEditingModeEnabled","displayHighlightedGeofence","hideHighlightedGeofence","displayGeofence","hideGeofence","fitGeofence","fitAllGeofences","_ui","removeElement","_container","mapCanvas","document","getElementsByClassName","item","className","map","_map","reorderMapLibreClassNames","_amplifyDraw","registerControlPosition","createGeofenceListContainer","once","getSource","_drawGeofencesOutput","fillColor","borderColor","borderOpacity","_highlightedGeofenceOutput","borderWidth","addControl","NavigationControl","showCompass","on","coordinates","_mapBoxDraw","getAll","features","geometry","radius","Math","floor","length","updateGeofenceRadius","toFixed","geofenceId","createAddGeofencePromptError","feature","get","_editingGeofenceId","idToSave","saveGeofences","polygon","response","errors","err","Error","error","code","message","success","successes","savedGeofence","listGeofences","entries","nextToken","_listGeofencesNextToken","loadGeofence","forEach","geofence","updateGeofenceCount","Object","keys","data","assign","id","add","deleteGeofences","removeGeofenceListItem","filter","_updateDisplayedGeofences","idsToDelete","fence","renderListItem","push","updateCheckbox","values","checkboxes","Array","from","checkbox","checked","getCheckboxAllValue","mapBounds","getBounds","coord","extend","fitBounds","padding","shouldFitBounds","contains","setData","console","warn","show","hide","mode","delete","drawCircularGeofence","drawPolygonGeofence","enabled","enable","disable","setGeofenceListEnabled","event","radiusString","target","parseInt","isNaN"],"sources":["/Users/carterbrewer/Downloads/trucker_app-main/node_modules/maplibre-gl-js-amplify/lib/esm/AmplifyGeofenceControl/index.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport maplibregl from \"maplibre-gl\";\nimport { Geo } from \"@aws-amplify/geo\";\nimport { drawGeofences } from \"../drawGeofences\";\nimport { isValidGeofenceId, getGeofenceFeatureFromPolygon, getGeofenceFeatureArray, isExistingGeofenceId, getDistanceBetweenCoordinates, } from \"../geofenceUtils\";\nimport { GEOFENCE_COLOR, GEOFENCE_BORDER_COLOR } from \"../constants\";\nimport { AmplifyGeofenceControlUI } from \"./ui\";\nimport { AmplifyMapDraw } from \"./AmplifyMapDraw\";\nimport { createElement } from \"../utils\";\nconst FIT_BOUNDS_PADDING = { left: 240 }; // Default to 240px right now because of the left nav\nexport class AmplifyGeofenceControl {\n    constructor(options) {\n        this._geofenceCollectionId = options === null || options === void 0 ? void 0 : options.geofenceCollectionId;\n        this._loadedGeofences = {};\n        this._displayedGeofences = [];\n        this.changeMode = this.changeMode.bind(this);\n        this.loadInitialGeofences = this.loadInitialGeofences.bind(this);\n        this.loadMoreGeofences = this.loadMoreGeofences.bind(this);\n        this._loadGeofence = this._loadGeofence.bind(this);\n        this.updateInputRadius = this.updateInputRadius.bind(this);\n        this.saveGeofence = this.saveGeofence.bind(this);\n        this.editGeofence = this.editGeofence.bind(this);\n        this.deleteGeofence = this.deleteGeofence.bind(this);\n        this.displayAllGeofences = this.displayAllGeofences.bind(this);\n        this.hideAllGeofences = this.hideAllGeofences.bind(this);\n        this.addEditableGeofence = this.addEditableGeofence.bind(this);\n        this.setEditingModeEnabled = this.setEditingModeEnabled.bind(this);\n        this.displayHighlightedGeofence =\n            this.displayHighlightedGeofence.bind(this);\n        this.hideHighlightedGeofence = this.hideHighlightedGeofence.bind(this);\n        this.displayGeofence = this.displayGeofence.bind(this);\n        this.hideGeofence = this.hideGeofence.bind(this);\n        this.fitGeofence = this.fitGeofence.bind(this);\n        this.fitAllGeofences = this.fitAllGeofences.bind(this);\n    }\n    /**********************************************************************\n     Public Methods for AmplifyGeofenceControl\n     **********************************************************************/\n    getDefaultPosition() {\n        return \"full-screen\";\n    }\n    onRemove() {\n        this._ui.removeElement(this._container);\n    }\n    // Reorders MapLibre canvas class names to fix a mapbox draw bug - https://github.com/mapbox/mapbox-gl-draw/pull/1079\n    reorderMapLibreClassNames() {\n        const mapCanvas = document\n            .getElementsByClassName(\"maplibregl-canvas\")\n            .item(0);\n        if (mapCanvas) {\n            mapCanvas.className = \"mapboxgl-canvas maplibregl-canvas\";\n        }\n    }\n    onAdd(map) {\n        this._map = map;\n        this.reorderMapLibreClassNames();\n        this._container = createElement(\"div\", \"geofence-ctrl maplibregl-ctrl\");\n        this._ui = AmplifyGeofenceControlUI(this, this._container);\n        this._amplifyDraw = new AmplifyMapDraw(map, this._ui);\n        this._ui.registerControlPosition(map, \"full-screen\");\n        this._ui.createGeofenceListContainer();\n        // Draw the geofences source to the map so we can update it on geofences load/creation\n        this._map.once(\"load\", function () {\n            // Prevents warnings on multiple re-renders, especially when rendered in react\n            if (this._map.getSource(\"displayedGeofences\")) {\n                return;\n            }\n            this._drawGeofencesOutput = drawGeofences(\"displayedGeofences\", [], this._map, {\n                fillColor: GEOFENCE_COLOR,\n                borderColor: GEOFENCE_BORDER_COLOR,\n                borderOpacity: 1,\n            });\n            this._highlightedGeofenceOutput = drawGeofences(\"highlightedGeofence\", [], this._map, {\n                fillColor: GEOFENCE_COLOR,\n                borderColor: GEOFENCE_BORDER_COLOR,\n                borderOpacity: 1,\n                borderWidth: 6,\n            });\n            this.loadInitialGeofences();\n            map.addControl(new maplibregl.NavigationControl({ showCompass: false }), \"bottom-right\");\n        }.bind(this));\n        this._map.on(\"draw.update\", () => {\n            const coordinates = this._amplifyDraw._mapBoxDraw.getAll().features[0].geometry.coordinates[0];\n            const radius = getDistanceBetweenCoordinates(coordinates[0], coordinates[Math.floor(coordinates.length / 2)]) / 2;\n            this._ui.updateGeofenceRadius(radius.toFixed(2));\n        });\n        return this._container;\n    }\n    createGeofence(geofenceId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!geofenceId || geofenceId.length === 0) {\n                this._ui.createAddGeofencePromptError(\"Geofence ID is empty.\");\n                return;\n            }\n            if (!isValidGeofenceId(geofenceId)) {\n                this._ui.createAddGeofencePromptError(\"Geofence ID contains special characters.\");\n                return;\n            }\n            if (isExistingGeofenceId(geofenceId, this._loadedGeofences)) {\n                this._ui.createAddGeofencePromptError(\"Geofence ID already exists.\");\n                return;\n            }\n            return this.saveGeofence(geofenceId);\n        });\n    }\n    saveGeofence(geofenceId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const feature = this._amplifyDraw.get(this._editingGeofenceId);\n            const idToSave = geofenceId || this._editingGeofenceId;\n            const response = yield Geo.saveGeofences({\n                geofenceId: idToSave,\n                geometry: { polygon: feature.geometry[\"coordinates\"] },\n            });\n            if (response.errors[0]) {\n                const err = response.errors[0];\n                throw new Error(`There was an error saving geofence with id ${idToSave}: ${err.error.code} - ${err.error.message}`);\n            }\n            const success = response.successes[0];\n            const savedGeofence = {\n                geofenceId: success.geofenceId,\n                geometry: { polygon: feature.geometry[\"coordinates\"] },\n            };\n            // render geofence to the map and add it to the list\n            this._loadGeofence(savedGeofence);\n            this.displayGeofence(savedGeofence.geofenceId);\n            this.setEditingModeEnabled(false);\n            return savedGeofence.geofenceId;\n        });\n    }\n    // Each page loads 100 geofences\n    loadInitialGeofences() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { entries, nextToken } = yield Geo.listGeofences();\n                this._listGeofencesNextToken = nextToken;\n                const loadGeofence = this._loadGeofence;\n                entries.forEach((geofence) => loadGeofence(geofence));\n                this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n            }\n            catch (e) {\n                throw new Error(`Error calling listGeofences: ${e}`);\n            }\n        });\n    }\n    loadMoreGeofences() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this._listGeofencesNextToken) {\n                try {\n                    const { entries, nextToken } = yield Geo.listGeofences({\n                        nextToken: this._listGeofencesNextToken,\n                    });\n                    this._listGeofencesNextToken = nextToken;\n                    const loadGeofence = this._loadGeofence;\n                    entries.forEach((geofence) => loadGeofence(geofence));\n                    this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n                }\n                catch (e) {\n                    throw new Error(`Error calling listGeofences: ${e}`);\n                }\n            }\n        });\n    }\n    editGeofence(geofenceId) {\n        this.setEditingModeEnabled(true);\n        const geofence = this._loadedGeofences[geofenceId];\n        if (!geofence) {\n            throw new Error(`Geofence with id ${geofenceId} does not exist`);\n        }\n        // render in mapboxdraw\n        const feature = getGeofenceFeatureFromPolygon(geofence.geometry.polygon);\n        const data = Object.assign({ id: geofence.geofenceId }, feature);\n        this._amplifyDraw.add(data);\n        this._editingGeofenceId = geofence.geofenceId;\n    }\n    deleteGeofence(geofenceId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = yield Geo.deleteGeofences(geofenceId);\n            if (response.errors[0]) {\n                const err = response.errors[0].error;\n                throw new Error(`There was an error deleting geofence with id ${geofenceId}: ${err.code} - ${err.message}`);\n            }\n            this._ui.removeGeofenceListItem(geofenceId);\n            delete this._loadedGeofences[geofenceId];\n            this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n            this._displayedGeofences = this._displayedGeofences.filter((geofence) => geofence.geofenceId !== geofenceId);\n            this._updateDisplayedGeofences();\n            return geofenceId;\n        });\n    }\n    deleteSelectedGeofences() {\n        const idsToDelete = this._displayedGeofences.map((fence) => fence.geofenceId);\n        // FIXME: delete geofence api call here\n        idsToDelete.forEach((id) => {\n            this._ui.removeGeofenceListItem(id);\n            delete this._loadedGeofences[id];\n        });\n        this._displayedGeofences = [];\n        this._updateDisplayedGeofences();\n    }\n    /**********************************************************************\n     Private methods for CRUD Geofences\n     **********************************************************************/\n    _loadGeofence(geofence) {\n        // If geofence exists remove it from displayed geofences\n        if (this._loadedGeofences[geofence.geofenceId]) {\n            this._displayedGeofences = this._displayedGeofences.filter((fence) => fence.geofenceId !== geofence.geofenceId);\n        }\n        else {\n            // If geofence doesn't exist render a new list item for it\n            this._ui.renderListItem(geofence);\n        }\n        this._loadedGeofences[geofence.geofenceId] = geofence;\n        this._ui.updateGeofenceCount(Object.keys(this._loadedGeofences).length);\n    }\n    displayGeofence(geofenceId) {\n        this._displayedGeofences.push(this._loadedGeofences[geofenceId]);\n        this._updateDisplayedGeofences();\n        this._ui.updateCheckbox(geofenceId, true);\n        this.fitAllGeofences();\n    }\n    displayAllGeofences() {\n        this._displayedGeofences.push(...Object.values(this._loadedGeofences));\n        this._updateDisplayedGeofences();\n        const checkboxes = document.getElementsByClassName(\"geofence-ctrl-list-item-checkbox\");\n        Array.from(checkboxes).forEach((checkbox) => (checkbox.checked = this._ui.getCheckboxAllValue()));\n        this.fitAllGeofences();\n    }\n    fitGeofence(geofenceId) {\n        const mapBounds = this._map.getBounds();\n        const geofence = this._loadedGeofences[geofenceId];\n        geofence.geometry.polygon[0].forEach((coord) => {\n            mapBounds.extend(coord);\n        });\n        this._map.fitBounds(mapBounds, { padding: FIT_BOUNDS_PADDING });\n    }\n    fitAllGeofences() {\n        let shouldFitBounds = false;\n        const mapBounds = this._map.getBounds();\n        this._displayedGeofences.forEach((geofence) => {\n            geofence.geometry.polygon[0].forEach((coord) => {\n                if (!mapBounds.contains(coord)) {\n                    mapBounds.extend(coord);\n                    shouldFitBounds = true;\n                }\n            });\n        });\n        if (shouldFitBounds)\n            this._map.fitBounds(mapBounds, { padding: FIT_BOUNDS_PADDING });\n    }\n    hideGeofence(geofenceId) {\n        this._displayedGeofences = this._displayedGeofences.filter((geofence) => geofence.geofenceId !== geofenceId);\n        this._updateDisplayedGeofences();\n        this._ui.updateCheckbox(geofenceId, false);\n    }\n    hideAllGeofences() {\n        this._displayedGeofences = [];\n        this._updateDisplayedGeofences();\n        const checkboxes = document.getElementsByClassName(\"geofence-ctrl-list-item-checkbox\");\n        Array.from(checkboxes).forEach((checkbox) => (checkbox.checked = this._ui.getCheckboxAllValue()));\n    }\n    _updateDisplayedGeofences() {\n        const feature = getGeofenceFeatureArray(this._displayedGeofences);\n        this._drawGeofencesOutput.setData(feature);\n    }\n    displayHighlightedGeofence(geofenceId) {\n        const geofence = this._loadedGeofences[geofenceId];\n        if (!geofence) {\n            console.warn(`Geofence with id ${geofenceId} does not exist`);\n            return;\n        }\n        const feature = getGeofenceFeatureFromPolygon(geofence.geometry.polygon);\n        this._highlightedGeofenceOutput.setData(feature);\n        this._highlightedGeofenceOutput.show();\n    }\n    hideHighlightedGeofence() {\n        this._highlightedGeofenceOutput.hide();\n    }\n    /**********************************************************************\n     Methods for controlling amplify mapbox draw\n     **********************************************************************/\n    changeMode(mode) {\n        // erase existing mapbox draw content\n        this._amplifyDraw.delete(this._editingGeofenceId);\n        if (mode === \"draw_circle\") {\n            this._amplifyDraw.drawCircularGeofence(this._editingGeofenceId);\n        }\n        else {\n            this._amplifyDraw.drawPolygonGeofence(this._editingGeofenceId);\n        }\n    }\n    resetGeofence() {\n        // erase existing mapbox draw content\n        this._amplifyDraw.delete(this._editingGeofenceId);\n        if (isExistingGeofenceId(this._editingGeofenceId, this._loadedGeofences)) {\n            this.editGeofence(this._editingGeofenceId);\n        }\n        else {\n            this._amplifyDraw.drawPolygonGeofence(this._editingGeofenceId);\n        }\n    }\n    // Disables add button and selecting items from geofence list\n    setEditingModeEnabled(enabled) {\n        enabled ? this._amplifyDraw.enable() : this._amplifyDraw.disable();\n        enabled\n            ? this._drawGeofencesOutput.hide()\n            : this._drawGeofencesOutput.show();\n        this._ui.setGeofenceListEnabled(!enabled);\n    }\n    updateInputRadius(event) {\n        const radiusString = event.target.value;\n        const radius = parseInt(radiusString);\n        if (isNaN(radius)) {\n            return;\n        }\n        this._amplifyDraw.drawCircularGeofence(this._editingGeofenceId, radius);\n    }\n    addEditableGeofence() {\n        this._editingGeofenceId = \"tempGeofence\";\n        this._amplifyDraw.drawCircularGeofence(\"tempGeofence\");\n        this.setEditingModeEnabled(true);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}