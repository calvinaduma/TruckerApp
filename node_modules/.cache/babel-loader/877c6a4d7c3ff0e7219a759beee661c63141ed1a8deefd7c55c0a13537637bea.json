{"ast":null,"code":"import { jsx } from 'react/jsx-runtime';\nimport { useContext, useMemo, useEffect } from 'react';\nimport { useInterpret } from '@xstate/react';\nimport { createAuthenticatorMachine, listenToAuthHub } from '@aws-amplify/ui';\nimport { AuthenticatorContext } from './AuthenticatorContext.js';\nfunction AuthenticatorProvider(_ref) {\n  var children = _ref.children;\n  /**\n   * Based on use cases, developer might already have added another Provider\n   * outside Authenticator. In that case, we sync the two providers by just\n   * passing the parent value.\n   *\n   * TODO(BREAKING): enforce only one provider in App tree\n   */\n  var parentProviderVal = useContext(AuthenticatorContext);\n  var service = useInterpret(createAuthenticatorMachine);\n  var value = useMemo(function () {\n    return !parentProviderVal ? {\n      service: service\n    } : parentProviderVal;\n  }, [parentProviderVal, service]);\n  var activeService = value.service;\n  useEffect(function () {\n    var unsubscribe = listenToAuthHub(activeService);\n    return unsubscribe;\n  }, [activeService]);\n  return jsx(AuthenticatorContext.Provider, Object.assign({\n    value: value\n  }, {\n    children: children\n  }));\n}\nexport { AuthenticatorProvider as default };","map":{"version":3,"names":["jsx","useContext","useMemo","useEffect","useInterpret","createAuthenticatorMachine","listenToAuthHub","AuthenticatorContext","AuthenticatorProvider","children","parentProviderVal","service","value","activeService","unsubscribe","Provider","Object","assign","default"],"sources":["/Users/carterbrewer/Downloads/trucker_app-main/node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/context/AuthenticatorProvider.js"],"sourcesContent":["import { jsx } from 'react/jsx-runtime';\nimport { useContext, useMemo, useEffect } from 'react';\nimport { useInterpret } from '@xstate/react';\nimport { createAuthenticatorMachine, listenToAuthHub } from '@aws-amplify/ui';\nimport { AuthenticatorContext } from './AuthenticatorContext.js';\n\nfunction AuthenticatorProvider({ children, }) {\n    /**\n     * Based on use cases, developer might already have added another Provider\n     * outside Authenticator. In that case, we sync the two providers by just\n     * passing the parent value.\n     *\n     * TODO(BREAKING): enforce only one provider in App tree\n     */\n    const parentProviderVal = useContext(AuthenticatorContext);\n    const service = useInterpret(createAuthenticatorMachine);\n    const value = useMemo(() => (!parentProviderVal ? { service } : parentProviderVal), [parentProviderVal, service]);\n    const { service: activeService } = value;\n    useEffect(() => {\n        const unsubscribe = listenToAuthHub(activeService);\n        return unsubscribe;\n    }, [activeService]);\n    return (jsx(AuthenticatorContext.Provider, Object.assign({ value: value }, { children: children })));\n}\n\nexport { AuthenticatorProvider as default };\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,mBAAmB;AACvC,SAASC,UAAU,EAAEC,OAAO,EAAEC,SAAS,QAAQ,OAAO;AACtD,SAASC,YAAY,QAAQ,eAAe;AAC5C,SAASC,0BAA0B,EAAEC,eAAe,QAAQ,iBAAiB;AAC7E,SAASC,oBAAoB,QAAQ,2BAA2B;AAEhE,SAASC,qBAAqB,OAAgB;EAAA,IAAbC,QAAQ,QAARA,QAAQ;EACrC;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,IAAMC,iBAAiB,GAAGT,UAAU,CAACM,oBAAoB,CAAC;EAC1D,IAAMI,OAAO,GAAGP,YAAY,CAACC,0BAA0B,CAAC;EACxD,IAAMO,KAAK,GAAGV,OAAO,CAAC;IAAA,OAAO,CAACQ,iBAAiB,GAAG;MAAEC,OAAO,EAAPA;IAAQ,CAAC,GAAGD,iBAAiB;EAAA,CAAC,EAAE,CAACA,iBAAiB,EAAEC,OAAO,CAAC,CAAC;EACjH,IAAiBE,aAAa,GAAKD,KAAK,CAAhCD,OAAO;EACfR,SAAS,CAAC,YAAM;IACZ,IAAMW,WAAW,GAAGR,eAAe,CAACO,aAAa,CAAC;IAClD,OAAOC,WAAW;EACtB,CAAC,EAAE,CAACD,aAAa,CAAC,CAAC;EACnB,OAAQb,GAAG,CAACO,oBAAoB,CAACQ,QAAQ,EAAEC,MAAM,CAACC,MAAM,CAAC;IAAEL,KAAK,EAAEA;EAAM,CAAC,EAAE;IAAEH,QAAQ,EAAEA;EAAS,CAAC,CAAC,CAAC;AACvG;AAEA,SAASD,qBAAqB,IAAIU,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}