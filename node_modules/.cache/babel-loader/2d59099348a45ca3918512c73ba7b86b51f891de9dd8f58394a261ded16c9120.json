{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/carterbrewer/Downloads/trucker_app-main/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"/Users/carterbrewer/Downloads/trucker_app-main/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/Users/carterbrewer/Downloads/trucker_app-main/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/carterbrewer/Downloads/trucker_app-main/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { transformToViewState, applyViewStateToTransform, cloneTransform } from '../utils/transform';\nimport { normalizeStyle } from '../utils/style-utils';\nimport { deepEqual } from '../utils/deep-equal';\nvar pointerEvents = {\n  mousedown: 'onMouseDown',\n  mouseup: 'onMouseUp',\n  mouseover: 'onMouseOver',\n  mousemove: 'onMouseMove',\n  click: 'onClick',\n  dblclick: 'onDblClick',\n  mouseenter: 'onMouseEnter',\n  mouseleave: 'onMouseLeave',\n  mouseout: 'onMouseOut',\n  contextmenu: 'onContextMenu',\n  touchstart: 'onTouchStart',\n  touchend: 'onTouchEnd',\n  touchmove: 'onTouchMove',\n  touchcancel: 'onTouchCancel'\n};\nvar cameraEvents = {\n  movestart: 'onMoveStart',\n  move: 'onMove',\n  moveend: 'onMoveEnd',\n  dragstart: 'onDragStart',\n  drag: 'onDrag',\n  dragend: 'onDragEnd',\n  zoomstart: 'onZoomStart',\n  zoom: 'onZoom',\n  zoomend: 'onZoomEnd',\n  rotatestart: 'onRotateStart',\n  rotate: 'onRotate',\n  rotateend: 'onRotateEnd',\n  pitchstart: 'onPitchStart',\n  pitch: 'onPitch',\n  pitchend: 'onPitchEnd'\n};\nvar otherEvents = {\n  wheel: 'onWheel',\n  boxzoomstart: 'onBoxZoomStart',\n  boxzoomend: 'onBoxZoomEnd',\n  boxzoomcancel: 'onBoxZoomCancel',\n  resize: 'onResize',\n  load: 'onLoad',\n  render: 'onRender',\n  idle: 'onIdle',\n  remove: 'onRemove',\n  data: 'onData',\n  styledata: 'onStyleData',\n  sourcedata: 'onSourceData',\n  error: 'onError'\n};\nvar settingNames = ['minZoom', 'maxZoom', 'minPitch', 'maxPitch', 'maxBounds', 'projection', 'renderWorldCopies'];\nvar handlerNames = ['scrollZoom', 'boxZoom', 'dragRotate', 'dragPan', 'keyboard', 'doubleClickZoom', 'touchZoomRotate', 'touchPitch'];\n/**\n * A wrapper for mapbox-gl's Map class\n */\nvar Mapbox = /*#__PURE__*/function () {\n  function Mapbox(MapClass, props, container) {\n    var _this = this;\n    _classCallCheck(this, Mapbox);\n    // mapboxgl.Map instance. Not using type here because we are accessing\n    // private members and methods\n    this._map = null;\n    // Internal states\n    this._internalUpdate = false;\n    this._inRender = false;\n    this._hoveredFeatures = null;\n    this._deferredEvents = {\n      move: false,\n      zoom: false,\n      pitch: false,\n      rotate: false\n    };\n    this._onEvent = function (e) {\n      // @ts-ignore\n      var cb = _this.props[otherEvents[e.type]];\n      if (cb) {\n        cb(e);\n      }\n    };\n    this._onPointerEvent = function (e) {\n      if (e.type === 'mousemove' || e.type === 'mouseout') {\n        _this._updateHover(e);\n      }\n      // @ts-ignore\n      var cb = _this.props[pointerEvents[e.type]];\n      if (cb) {\n        if (_this.props.interactiveLayerIds && e.type !== 'mouseover' && e.type !== 'mouseout') {\n          var features = _this._hoveredFeatures || _this._map.queryRenderedFeatures(e.point, {\n            layers: _this.props.interactiveLayerIds\n          });\n          if (!features.length) {\n            return;\n          }\n          e.features = features;\n        }\n        cb(e);\n        delete e.features;\n      }\n    };\n    this._onCameraEvent = function (e) {\n      if (!_this._internalUpdate) {\n        // @ts-ignore\n        var cb = _this.props[cameraEvents[e.type]];\n        if (cb) {\n          cb(e);\n        }\n      }\n      if (e.type in _this._deferredEvents) {\n        _this._deferredEvents[e.type] = false;\n      }\n    };\n    this._MapClass = MapClass;\n    this.props = props;\n    this._initialize(container);\n  }\n  _createClass(Mapbox, [{\n    key: \"map\",\n    get: function get() {\n      return this._map;\n    }\n  }, {\n    key: \"transform\",\n    get: function get() {\n      return this._renderTransform;\n    }\n  }, {\n    key: \"setProps\",\n    value: function setProps(props) {\n      var oldProps = this.props;\n      this.props = props;\n      var settingsChanged = this._updateSettings(props, oldProps);\n      if (settingsChanged) {\n        this._renderTransform = cloneTransform(this._map.transform);\n      }\n      var sizeChanged = this._updateSize(props);\n      var viewStateChanged = this._updateViewState(props, true);\n      this._updateStyle(props, oldProps);\n      this._updateStyleComponents(props, oldProps);\n      this._updateHandlers(props, oldProps);\n      // If 1) view state has changed to match props and\n      //    2) the props change is not triggered by map events,\n      // it's driven by an external state change. Redraw immediately\n      if (settingsChanged || sizeChanged || viewStateChanged && !this._map.isMoving()) {\n        this.redraw();\n      }\n    }\n  }, {\n    key: \"_initialize\",\n    value: /* eslint-disable complexity,max-statements */\n    function _initialize(container) {\n      var _this2 = this;\n      var props = this.props;\n      var mapOptions = _objectSpread(_objectSpread(_objectSpread({}, props), props.initialViewState), {}, {\n        accessToken: props.mapboxAccessToken || getAccessTokenFromEnv() || null,\n        container: container,\n        style: normalizeStyle(props.mapStyle)\n      });\n      var viewState = mapOptions.initialViewState || mapOptions.viewState || mapOptions;\n      Object.assign(mapOptions, {\n        center: [viewState.longitude || 0, viewState.latitude || 0],\n        zoom: viewState.zoom || 0,\n        pitch: viewState.pitch || 0,\n        bearing: viewState.bearing || 0\n      });\n      if (props.gl) {\n        // eslint-disable-next-line\n        var getContext = HTMLCanvasElement.prototype.getContext;\n        // Hijack canvas.getContext to return our own WebGLContext\n        // This will be called inside the mapboxgl.Map constructor\n        // @ts-expect-error\n        HTMLCanvasElement.prototype.getContext = function () {\n          // Unhijack immediately\n          HTMLCanvasElement.prototype.getContext = getContext;\n          return props.gl;\n        };\n      }\n      var map = new this._MapClass(mapOptions);\n      // Props that are not part of constructor options\n      if (viewState.padding) {\n        map.setPadding(viewState.padding);\n      }\n      if (props.cursor) {\n        map.getCanvas().style.cursor = props.cursor;\n      }\n      this._renderTransform = cloneTransform(map.transform);\n      // Hack\n      // Insert code into map's render cycle\n      var renderMap = map._render;\n      map._render = function (arg) {\n        _this2._inRender = true;\n        renderMap.call(map, arg);\n        _this2._inRender = false;\n      };\n      var runRenderTaskQueue = map._renderTaskQueue.run;\n      map._renderTaskQueue.run = function (arg) {\n        runRenderTaskQueue.call(map._renderTaskQueue, arg);\n        _this2._onBeforeRepaint();\n      };\n      map.on('render', function () {\n        return _this2._onAfterRepaint();\n      });\n      // Insert code into map's event pipeline\n      var fireEvent = map.fire;\n      map.fire = this._fireEvent.bind(this, fireEvent);\n      // add listeners\n      map.on('resize', function () {\n        _this2._renderTransform.resize(map.transform.width, map.transform.height);\n      });\n      map.on('styledata', function () {\n        return _this2._updateStyleComponents(_this2.props, {});\n      });\n      map.on('sourcedata', function () {\n        return _this2._updateStyleComponents(_this2.props, {});\n      });\n      for (var eventName in pointerEvents) {\n        map.on(eventName, this._onPointerEvent);\n      }\n      for (var _eventName in cameraEvents) {\n        map.on(_eventName, this._onCameraEvent);\n      }\n      for (var _eventName2 in otherEvents) {\n        map.on(_eventName2, this._onEvent);\n      }\n      this._map = map;\n    }\n    /* eslint-enable complexity,max-statements */\n  }, {\n    key: \"recycle\",\n    value: function recycle() {\n      Mapbox.savedMaps.push(this);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._map.remove();\n    }\n    // Force redraw the map now. Typically resize() and jumpTo() is reflected in the next\n    // render cycle, which is managed by Mapbox's animation loop.\n    // This removes the synchronization issue caused by requestAnimationFrame.\n  }, {\n    key: \"redraw\",\n    value: function redraw() {\n      var map = this._map;\n      // map._render will throw error if style does not exist\n      // https://github.com/mapbox/mapbox-gl-js/blob/fb9fc316da14e99ff4368f3e4faa3888fb43c513\n      //   /src/ui/map.js#L1834\n      if (!this._inRender && map.style) {\n        // cancel the scheduled update\n        if (map._frame) {\n          map._frame.cancel();\n          map._frame = null;\n        }\n        // the order is important - render() may schedule another update\n        map._render();\n      }\n    }\n    /* Trigger map resize if size is controlled\n       @param {object} nextProps\n       @returns {bool} true if size has changed\n     */\n  }, {\n    key: \"_updateSize\",\n    value: function _updateSize(nextProps) {\n      // Check if size is controlled\n      var viewState = nextProps.viewState;\n      if (viewState) {\n        var map = this._map;\n        if (viewState.width !== map.transform.width || viewState.height !== map.transform.height) {\n          map.resize();\n          return true;\n        }\n      }\n      return false;\n    }\n    // Adapted from map.jumpTo\n    /* Update camera to match props\n       @param {object} nextProps\n       @param {bool} triggerEvents - should fire camera events\n       @returns {bool} true if anything is changed\n     */\n  }, {\n    key: \"_updateViewState\",\n    value: function _updateViewState(nextProps, triggerEvents) {\n      if (this._internalUpdate) {\n        return false;\n      }\n      var map = this._map;\n      var tr = this._renderTransform;\n      // Take a snapshot of the transform before mutation\n      var zoom = tr.zoom,\n        pitch = tr.pitch,\n        bearing = tr.bearing;\n      var changed = applyViewStateToTransform(tr, _objectSpread(_objectSpread({}, transformToViewState(map.transform)), nextProps));\n      if (changed && triggerEvents) {\n        var deferredEvents = this._deferredEvents;\n        // Delay DOM control updates to the next render cycle\n        deferredEvents.move = true;\n        deferredEvents.zoom || (deferredEvents.zoom = zoom !== tr.zoom);\n        deferredEvents.rotate || (deferredEvents.rotate = bearing !== tr.bearing);\n        deferredEvents.pitch || (deferredEvents.pitch = pitch !== tr.pitch);\n      }\n      // Avoid manipulating the real transform when interaction/animation is ongoing\n      // as it would interfere with Mapbox's handlers\n      if (!map.isMoving()) {\n        applyViewStateToTransform(map.transform, nextProps);\n      }\n      return changed;\n    }\n    /* Update camera constraints and projection settings to match props\n       @param {object} nextProps\n       @param {object} currProps\n       @returns {bool} true if anything is changed\n     */\n  }, {\n    key: \"_updateSettings\",\n    value: function _updateSettings(nextProps, currProps) {\n      var map = this._map;\n      var changed = false;\n      var _iterator = _createForOfIteratorHelper(settingNames),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var propName = _step.value;\n          if (propName in nextProps && !deepEqual(nextProps[propName], currProps[propName])) {\n            changed = true;\n            map[\"set\".concat(propName[0].toUpperCase()).concat(propName.slice(1))](nextProps[propName]);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return changed;\n    }\n    /* Update map style to match props\n       @param {object} nextProps\n       @param {object} currProps\n       @returns {bool} true if style is changed\n     */\n  }, {\n    key: \"_updateStyle\",\n    value: function _updateStyle(nextProps, currProps) {\n      if (nextProps.cursor !== currProps.cursor) {\n        this._map.getCanvas().style.cursor = nextProps.cursor;\n      }\n      if (nextProps.mapStyle !== currProps.mapStyle) {\n        var options = {\n          diff: nextProps.styleDiffing\n        };\n        if ('localIdeographFontFamily' in nextProps) {\n          options.localIdeographFontFamily = nextProps.localIdeographFontFamily;\n        }\n        this._map.setStyle(normalizeStyle(nextProps.mapStyle), options);\n        return true;\n      }\n      return false;\n    }\n    /* Update fog, light and terrain to match props\n       @param {object} nextProps\n       @param {object} currProps\n       @returns {bool} true if anything is changed\n     */\n  }, {\n    key: \"_updateStyleComponents\",\n    value: function _updateStyleComponents(nextProps, currProps) {\n      var map = this._map;\n      var changed = false;\n      if (map.style.loaded()) {\n        if ('light' in nextProps && !deepEqual(nextProps.light, currProps.light)) {\n          changed = true;\n          map.setLight(nextProps.light);\n        }\n        if ('fog' in nextProps && !deepEqual(nextProps.fog, currProps.fog)) {\n          changed = true;\n          map.setFog(nextProps.fog);\n        }\n        if ('terrain' in nextProps && !deepEqual(nextProps.terrain, currProps.terrain)) {\n          if (!nextProps.terrain || map.getSource(nextProps.terrain.source)) {\n            changed = true;\n            map.setTerrain(nextProps.terrain);\n          }\n        }\n      }\n      return changed;\n    }\n    /* Update interaction handlers to match props\n       @param {object} nextProps\n       @param {object} currProps\n       @returns {bool} true if anything is changed\n     */\n  }, {\n    key: \"_updateHandlers\",\n    value: function _updateHandlers(nextProps, currProps) {\n      var map = this._map;\n      var changed = false;\n      var _iterator2 = _createForOfIteratorHelper(handlerNames),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var propName = _step2.value;\n          var newValue = nextProps[propName];\n          if (!deepEqual(newValue, currProps[propName])) {\n            changed = true;\n            if (newValue) {\n              map[propName].enable(newValue);\n            } else {\n              map[propName].disable();\n            }\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return changed;\n    }\n  }, {\n    key: \"_updateHover\",\n    value: function _updateHover(e) {\n      var _a;\n      var props = this.props;\n      var shouldTrackHoveredFeatures = props.interactiveLayerIds && (props.onMouseMove || props.onMouseEnter || props.onMouseLeave);\n      if (shouldTrackHoveredFeatures) {\n        var eventType = e.type;\n        var wasHovering = ((_a = this._hoveredFeatures) === null || _a === void 0 ? void 0 : _a.length) > 0;\n        var features;\n        if (eventType === 'mousemove') {\n          try {\n            features = this._map.queryRenderedFeatures(e.point, {\n              layers: props.interactiveLayerIds\n            });\n          } catch (_b) {\n            features = [];\n          }\n        } else {\n          features = [];\n        }\n        var isHovering = features.length > 0;\n        if (!isHovering && wasHovering) {\n          e.type = 'mouseleave';\n          this._onPointerEvent(e);\n        }\n        this._hoveredFeatures = features;\n        if (isHovering && !wasHovering) {\n          e.type = 'mouseenter';\n          this._onPointerEvent(e);\n        }\n        e.type = eventType;\n      } else {\n        this._hoveredFeatures = null;\n      }\n    }\n  }, {\n    key: \"_fireEvent\",\n    value: function _fireEvent(baseFire, event, properties) {\n      var map = this._map;\n      var tr = map.transform;\n      var eventType = typeof event === 'string' ? event : event.type;\n      if (eventType === 'move') {\n        this._updateViewState(this.props, false);\n      }\n      if (eventType in cameraEvents) {\n        if (typeof event === 'object') {\n          event.viewState = transformToViewState(tr);\n        }\n        if (this._map.isMoving()) {\n          // Replace map.transform with ours during the callbacks\n          map.transform = this._renderTransform;\n          baseFire.call(map, event, properties);\n          map.transform = tr;\n          return map;\n        }\n      }\n      baseFire.call(map, event, properties);\n      return map;\n    }\n    // All camera manipulations are complete, ready to repaint\n  }, {\n    key: \"_onBeforeRepaint\",\n    value: function _onBeforeRepaint() {\n      var _this3 = this;\n      var map = this._map;\n      // If there are camera changes driven by props, invoke camera events so that DOM controls are synced\n      this._internalUpdate = true;\n      for (var eventType in this._deferredEvents) {\n        if (this._deferredEvents[eventType]) {\n          map.fire(eventType);\n        }\n      }\n      this._internalUpdate = false;\n      var tr = this._map.transform;\n      // Make sure camera matches the current props\n      this._map.transform = this._renderTransform;\n      this._map.painter.transform = this._renderTransform;\n      this._onAfterRepaint = function () {\n        // Terrain is updated during render\n        if (tr.elevation = _this3._renderTransform.elevation) {\n          tr.updateElevation(false);\n        }\n        // Restores camera state before render/load events are fired\n        _this3._map.transform = tr;\n      };\n    }\n  }], [{\n    key: \"reuse\",\n    value: function reuse(props, container) {\n      var that = Mapbox.savedMaps.pop();\n      if (!that) {\n        return null;\n      }\n      var map = that.map;\n      // When reusing the saved map, we need to reparent the map(canvas) and other child nodes\n      // intoto the new container from the props.\n      // Step1: reparenting child nodes from old container to new container\n      var oldContainer = map.getContainer();\n      container.className = oldContainer.className;\n      while (oldContainer.childNodes.length > 0) {\n        container.appendChild(oldContainer.childNodes[0]);\n      }\n      // Step2: replace the internal container with new container from the react component\n      // @ts-ignore\n      map._container = container;\n      // Step 3: apply new props\n      if (props.initialViewState) {\n        that._updateViewState(props.initialViewState, false);\n      }\n      map.resize();\n      that.setProps(_objectSpread(_objectSpread({}, props), {}, {\n        styleDiffing: false\n      }));\n      // Simulate load event\n      if (map.isStyleLoaded()) {\n        map.fire('load');\n      } else {\n        map.once('styledata', function () {\n          return map.fire('load');\n        });\n      }\n      return that;\n    }\n  }]);\n  return Mapbox;\n}();\nexport { Mapbox as default };\nMapbox.savedMaps = [];\n/**\n * Access token can be provided via one of:\n *   mapboxAccessToken prop\n *   access_token query parameter\n *   MapboxAccessToken environment variable\n *   REACT_APP_MAPBOX_ACCESS_TOKEN environment variable\n * @returns access token\n */\nfunction getAccessTokenFromEnv() {\n  var accessToken = null;\n  /* global location, process */\n  if (typeof location !== 'undefined') {\n    var match = /access_token=([^&\\/]*)/.exec(location.search);\n    accessToken = match && match[1];\n  }\n  // Note: This depends on bundler plugins (e.g. webpack) importing environment correctly\n  try {\n    accessToken = accessToken || process.env.MapboxAccessToken;\n  } catch (_a) {\n    // ignore\n  }\n  try {\n    accessToken = accessToken || process.env.REACT_APP_MAPBOX_ACCESS_TOKEN;\n  } catch (_b) {\n    // ignore\n  }\n  return accessToken;\n}","map":{"version":3,"mappings":"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","names":["transformToViewState","applyViewStateToTransform","cloneTransform","normalizeStyle","deepEqual","pointerEvents","mousedown","mouseup","mouseover","mousemove","click","dblclick","mouseenter","mouseleave","mouseout","contextmenu","touchstart","touchend","touchmove","touchcancel","cameraEvents","movestart","move","moveend","dragstart","drag","dragend","zoomstart","zoom","zoomend","rotatestart","rotate","rotateend","pitchstart","pitch","pitchend","otherEvents","wheel","boxzoomstart","boxzoomend","boxzoomcancel","resize","load","render","idle","remove","data","styledata","sourcedata","error","settingNames","handlerNames","Mapbox","MapClass","props","container","e","cb","type","_updateHover","interactiveLayerIds","features","_hoveredFeatures","_map","queryRenderedFeatures","point","layers","length","_internalUpdate","_deferredEvents","_MapClass","_initialize","_renderTransform","oldProps","settingsChanged","_updateSettings","transform","sizeChanged","_updateSize","viewStateChanged","_updateViewState","_updateStyle","_updateStyleComponents","_updateHandlers","isMoving","redraw","mapOptions","initialViewState","accessToken","mapboxAccessToken","getAccessTokenFromEnv","style","mapStyle","viewState","Object","assign","center","longitude","latitude","bearing","gl","getContext","HTMLCanvasElement","prototype","map","padding","setPadding","cursor","getCanvas","renderMap","_render","arg","_inRender","call","runRenderTaskQueue","_renderTaskQueue","run","_onBeforeRepaint","on","_onAfterRepaint","fireEvent","fire","_fireEvent","bind","width","height","eventName","_onPointerEvent","_onCameraEvent","_onEvent","savedMaps","push","_frame","cancel","nextProps","triggerEvents","tr","changed","deferredEvents","currProps","propName","toUpperCase","slice","options","diff","styleDiffing","localIdeographFontFamily","setStyle","loaded","light","setLight","fog","setFog","terrain","getSource","source","setTerrain","newValue","enable","disable","shouldTrackHoveredFeatures","onMouseMove","onMouseEnter","onMouseLeave","eventType","wasHovering","isHovering","baseFire","event","properties","painter","elevation","updateElevation","that","pop","oldContainer","getContainer","className","childNodes","appendChild","_container","setProps","isStyleLoaded","once","location","match","exec","search","process","env","MapboxAccessToken","REACT_APP_MAPBOX_ACCESS_TOKEN"],"sources":["/Users/carterbrewer/Downloads/trucker_app-main/node_modules/react-map-gl/src/mapbox/mapbox.ts"],"sourcesContent":["import {transformToViewState, applyViewStateToTransform, cloneTransform} from '../utils/transform';\nimport {normalizeStyle} from '../utils/style-utils';\nimport {deepEqual} from '../utils/deep-equal';\n\nimport type {\n  Transform,\n  ProjectionSpecification,\n  ViewState,\n  ViewStateChangeEvent,\n  DragPanOptions,\n  ZoomRotateOptions,\n  TransformRequestFunction,\n  Light,\n  Fog,\n  TerrainSpecification,\n  MapboxStyle,\n  ImmutableLike,\n  LngLatBoundsLike,\n  FitBoundsOptions,\n  MapMouseEvent,\n  MapLayerMouseEvent,\n  MapLayerTouchEvent,\n  MapWheelEvent,\n  MapBoxZoomEvent,\n  MapStyleDataEvent,\n  MapSourceDataEvent,\n  MapboxEvent,\n  ErrorEvent,\n  MapboxGeoJSONFeature,\n  MapboxMap\n} from '../types';\n\nexport type MapboxProps = Partial<ViewState> & {\n  // Init options\n  mapboxAccessToken?: string;\n\n  /** Camera options used when constructing the Map instance */\n  initialViewState?: Partial<ViewState> & {\n    /** The initial bounds of the map. If bounds is specified, it overrides longitude, latitude and zoom options. */\n    bounds?: LngLatBoundsLike;\n    /** A fitBounds options object to use only when setting the bounds option. */\n    fitBoundsOptions?: FitBoundsOptions;\n  };\n\n  /** If provided, render into an external WebGL context */\n  gl?: WebGLRenderingContext;\n\n  /**\n   * If true, the gl context will be created with MSA antialiasing, which can be useful for antialiasing custom layers.\n   * This is false by default as a performance optimization.\n   * @default false\n   */\n  antialias?: boolean;\n  /**\n   * If true, an attribution control will be added to the map.\n   * @default true\n   */\n  attributionControl?: boolean;\n  /**\n   * Snap to north threshold in degrees.\n   * @default 7\n   */\n  bearingSnap?: number;\n  /**\n   * The max number of pixels a user can shift the mouse pointer during a click for it to be\n   * considered a valid click (as opposed to a mouse drag).\n   * @default 3\n   */\n  clickTolerance?: number;\n  /**\n   * If `true`, Resource Timing API information will be collected for requests made by GeoJSON\n   * and Vector Tile web workers (this information is normally inaccessible from the main\n   * Javascript thread). Information will be returned in a `resourceTiming` property of\n   * relevant `data` events.\n   * @default false\n   */\n  collectResourceTiming?: boolean;\n  /**\n   * If `true` , scroll zoom will require pressing the ctrl or ⌘ key while scrolling to zoom map,\n   * and touch pan will require using two fingers while panning to move the map.\n   * Touch pitch will require three fingers to activate if enabled.\n   */\n  cooperativeGestures?: boolean;\n  /**\n   * If `true`, symbols from multiple sources can collide with each other during collision\n   * detection. If `false`, collision detection is run separately for the symbols in each source.\n   * @default true\n   */\n  crossSourceCollisions?: boolean;\n  /** String or strings to show in an AttributionControl.\n   * Only applicable if options.attributionControl is `true`. */\n  customAttribution?: string | string[];\n  /**\n   * Controls the duration of the fade-in/fade-out animation for label collisions, in milliseconds.\n   * This setting affects all symbol layers. This setting does not affect the duration of runtime\n   * styling transitions or raster tile cross-fading.\n   * @default 300\n   */\n  fadeDuration?: number;\n  /** If true, map creation will fail if the implementation determines that the performance of the created WebGL context would be dramatically lower than expected.\n   * @default false\n   */\n  failIfMajorPerformanceCaveat?: boolean;\n  /** If `true`, the map's position (zoom, center latitude, center longitude, bearing, and pitch) will be synced with the hash fragment of the page's URL.\n   * For example, `http://path/to/my/page.html#2.59/39.26/53.07/-24.1/60`.\n   * An additional string may optionally be provided to indicate a parameter-styled hash,\n   * e.g. http://path/to/my/page.html#map=2.59/39.26/53.07/-24.1/60&foo=bar, where foo\n   * is a custom parameter and bar is an arbitrary hash distinct from the map hash.\n   */\n  hash?: boolean | string;\n  /** If false, no mouse, touch, or keyboard listeners are attached to the map, so it will not respond to input\n   * @default true\n   */\n  interactive?: boolean;\n  /** A patch to apply to the default localization table for UI strings, e.g. control tooltips.\n   * The `locale` object maps namespaced UI string IDs to translated strings in the target language;\n   * see `src/ui/default_locale.js` for an example with all supported string IDs.\n   * The object may specify all UI strings (thereby adding support for a new translation) or\n   * only a subset of strings (thereby patching the default translation table).\n   */\n  locale?: {[key: string]: string};\n  /**\n   * Overrides the generation of all glyphs and font settings except font-weight keywords\n   * Also overrides localIdeographFontFamily\n   * @default null\n   */\n  localFontFamily?: string;\n  /**\n   * If specified, defines a CSS font-family for locally overriding generation of glyphs in the\n   * 'CJK Unified Ideographs' and 'Hangul Syllables' ranges. In these ranges, font settings from\n   * the map's style will be ignored, except for font-weight keywords (light/regular/medium/bold).\n   * The purpose of this option is to avoid bandwidth-intensive glyph server requests.\n   * @default \"sans-serif\"\n   */\n  localIdeographFontFamily?: string;\n  /**\n   * A string representing the position of the Mapbox wordmark on the map.\n   * @default \"bottom-left\"\n   */\n  logoPosition?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\n  /**\n   * The maximum number of tiles stored in the tile cache for a given source. If omitted, the\n   * cache will be dynamically sized based on the current viewport.\n   * @default null\n   */\n  maxTileCacheSize?: number;\n  /**\n   * If true, map will prioritize rendering for performance by reordering layers\n   * If false, layers will always be drawn in the specified order\n   * @default true\n   */\n  optimizeForTerrain?: boolean;\n  /**\n   * If `false`, the map's pitch (tilt) control with \"drag to rotate\" interaction will be disabled.\n   * @default true\n   */\n  pitchWithRotate?: boolean;\n  /** If true, The maps canvas can be exported to a PNG using map.getCanvas().toDataURL();. This is false by default as a performance optimization.\n   * @default false\n   */\n  preserveDrawingBuffer?: boolean;\n  /**\n   * If `false`, the map won't attempt to re-request tiles once they expire per their HTTP\n   * `cacheControl`/`expires` headers.\n   * @default true\n   */\n  refreshExpiredTiles?: boolean;\n  /**\n   * Allows for the usage of the map in automated tests without an accessToken with custom self-hosted test fixtures.\n   * @default null\n   */\n  testMode?: boolean;\n  /**\n   * If  true, the map will automatically resize when the browser window resizes\n   * @default true\n   */\n  trackResize?: boolean;\n  /**\n   * A callback run before the Map makes a request for an external URL. The callback can be\n   * used to modify the url, set headers, or set the credentials property for cross-origin requests.\n   * @default null\n   */\n  transformRequest?: TransformRequestFunction;\n\n  // Handlers\n\n  /**\n   * If true, enable the \"box zoom\" interaction (see BoxZoomHandler)\n   * @default true\n   */\n  boxZoom?: boolean;\n  /**\n   * If true, enable the \"double click to zoom\" interaction (see DoubleClickZoomHandler).\n   * @default true\n   */\n  doubleClickZoom?: boolean;\n  /**\n   * If `true`, the \"drag to pan\" interaction is enabled.\n   * An `Object` value is passed as options to {@link DragPanHandler#enable}.\n   * @default true\n   */\n  dragPan?: boolean | DragPanOptions;\n  /**\n   * If true, enable the \"drag to rotate\" interaction (see DragRotateHandler).\n   * @default true\n   */\n  dragRotate?: boolean;\n  /**\n   * If true, enable keyboard shortcuts (see KeyboardHandler).\n   * @default true\n   */\n  keyboard?: boolean;\n  /**\n   * If `true`, the \"scroll to zoom\" interaction is enabled.\n   * An `Object` value is passed as options to {@link ScrollZoomHandler#enable}.\n   * @default true\n   */\n  scrollZoom?: boolean | ZoomRotateOptions;\n  /**\n   * If `true`, the \"drag to pitch\" interaction is enabled.\n   * An `Object` value is passed as options to {@link TouchPitchHandler#enable}.\n   * @default true\n   */\n  touchPitch?: boolean;\n  /**\n   * If `true`, the \"pinch to rotate and zoom\" interaction is enabled.\n   * An `Object` value is passed as options to {@link TouchZoomRotateHandler#enable}.\n   * @default true\n   */\n  touchZoomRotate?: boolean | ZoomRotateOptions;\n\n  // Constraints\n\n  /** If set, the map is constrained to the given bounds. */\n  maxBounds?: LngLatBoundsLike;\n  /** Maximum pitch of the map. */\n  maxPitch?: number;\n  /** Maximum zoom of the map. */\n  maxZoom?: number;\n  /** Minimum pitch of the map. */\n  minPitch?: number;\n  /** Minimum zoom of the map. */\n  minZoom?: number;\n\n  /** For external controller to override the camera state */\n  viewState?: ViewState & {\n    width: number;\n    height: number;\n  };\n\n  // Styling\n\n  /** Mapbox style */\n  mapStyle?: string | MapboxStyle | ImmutableLike;\n  /** Enable diffing when the map style changes\n   * @default true\n   */\n  styleDiffing?: boolean;\n  /** The fog property of the style. Must conform to the Fog Style Specification .\n   * If `null` is provided, removes the fog from the map. */\n  fog?: Fog | null;\n  /** Light properties of the map. */\n  light?: Light;\n  /** Terrain property of the style. Must conform to the Terrain Style Specification .\n   * If `null` is provided, removes terrain from the map. */\n  terrain?: TerrainSpecification | null;\n  /** Default layers to query on pointer events */\n  interactiveLayerIds?: string[];\n  /** The projection the map should be rendered in\n   * @default \"mercator\"\n   */\n  projection?: ProjectionSpecification | string;\n  /**\n   * If `true`, multiple copies of the world will be rendered, when zoomed out.\n   * @default true\n   */\n  renderWorldCopies?: boolean;\n  /** CSS cursor */\n  cursor?: string;\n\n  // Callbacks\n  onMouseDown?: (e: MapLayerMouseEvent) => void;\n  onMouseUp?: (e: MapLayerMouseEvent) => void;\n  onMouseOver?: (e: MapLayerMouseEvent) => void;\n  onMouseMove?: (e: MapLayerMouseEvent) => void;\n  onClick?: (e: MapLayerMouseEvent) => void;\n  onDblClick?: (e: MapLayerMouseEvent) => void;\n  onMouseEnter?: (e: MapLayerMouseEvent) => void;\n  onMouseLeave?: (e: MapLayerMouseEvent) => void;\n  onMouseOut?: (e: MapLayerMouseEvent) => void;\n  onContextMenu?: (e: MapLayerMouseEvent) => void;\n  onTouchStart?: (e: MapLayerTouchEvent) => void;\n  onTouchEnd?: (e: MapLayerTouchEvent) => void;\n  onTouchMove?: (e: MapLayerTouchEvent) => void;\n  onTouchCancel?: (e: MapLayerTouchEvent) => void;\n\n  onMoveStart?: (e: ViewStateChangeEvent) => void;\n  onMove?: (e: ViewStateChangeEvent) => void;\n  onMoveEnd?: (e: ViewStateChangeEvent) => void;\n  onDragStart?: (e: ViewStateChangeEvent) => void;\n  onDrag?: (e: ViewStateChangeEvent) => void;\n  onDragEnd?: (e: ViewStateChangeEvent) => void;\n  onZoomStart?: (e: ViewStateChangeEvent) => void;\n  onZoom?: (e: ViewStateChangeEvent) => void;\n  onZoomEnd?: (e: ViewStateChangeEvent) => void;\n  onRotateStart?: (e: ViewStateChangeEvent) => void;\n  onRotate?: (e: ViewStateChangeEvent) => void;\n  onRotateEnd?: (e: ViewStateChangeEvent) => void;\n  onPitchStart?: (e: ViewStateChangeEvent) => void;\n  onPitch?: (e: ViewStateChangeEvent) => void;\n  onPitchEnd?: (e: ViewStateChangeEvent) => void;\n\n  onWheel?: (e: MapWheelEvent) => void;\n  onBoxZoomStart?: (e: MapBoxZoomEvent) => void;\n  onBoxZoomEnd?: (e: MapBoxZoomEvent) => void;\n  onBoxZoomCancel?: (e: MapBoxZoomEvent) => void;\n\n  onResize?: (e: MapboxEvent) => void;\n  onLoad?: (e: MapboxEvent) => void;\n  onRender?: (e: MapboxEvent) => void;\n  onIdle?: (e: MapboxEvent) => void;\n  onError?: (e: ErrorEvent) => void;\n  onRemove?: (e: MapboxEvent) => void;\n  onData?: (e: MapStyleDataEvent | MapSourceDataEvent) => void;\n  onStyleData?: (e: MapStyleDataEvent) => void;\n  onSourceData?: (e: MapSourceDataEvent) => void;\n};\n\nconst pointerEvents = {\n  mousedown: 'onMouseDown',\n  mouseup: 'onMouseUp',\n  mouseover: 'onMouseOver',\n  mousemove: 'onMouseMove',\n  click: 'onClick',\n  dblclick: 'onDblClick',\n  mouseenter: 'onMouseEnter',\n  mouseleave: 'onMouseLeave',\n  mouseout: 'onMouseOut',\n  contextmenu: 'onContextMenu',\n  touchstart: 'onTouchStart',\n  touchend: 'onTouchEnd',\n  touchmove: 'onTouchMove',\n  touchcancel: 'onTouchCancel'\n};\nconst cameraEvents = {\n  movestart: 'onMoveStart',\n  move: 'onMove',\n  moveend: 'onMoveEnd',\n  dragstart: 'onDragStart',\n  drag: 'onDrag',\n  dragend: 'onDragEnd',\n  zoomstart: 'onZoomStart',\n  zoom: 'onZoom',\n  zoomend: 'onZoomEnd',\n  rotatestart: 'onRotateStart',\n  rotate: 'onRotate',\n  rotateend: 'onRotateEnd',\n  pitchstart: 'onPitchStart',\n  pitch: 'onPitch',\n  pitchend: 'onPitchEnd'\n};\nconst otherEvents = {\n  wheel: 'onWheel',\n  boxzoomstart: 'onBoxZoomStart',\n  boxzoomend: 'onBoxZoomEnd',\n  boxzoomcancel: 'onBoxZoomCancel',\n  resize: 'onResize',\n  load: 'onLoad',\n  render: 'onRender',\n  idle: 'onIdle',\n  remove: 'onRemove',\n  data: 'onData',\n  styledata: 'onStyleData',\n  sourcedata: 'onSourceData',\n  error: 'onError'\n};\nconst settingNames: (keyof MapboxProps)[] = [\n  'minZoom',\n  'maxZoom',\n  'minPitch',\n  'maxPitch',\n  'maxBounds',\n  'projection',\n  'renderWorldCopies'\n];\nconst handlerNames: (keyof MapboxProps)[] = [\n  'scrollZoom',\n  'boxZoom',\n  'dragRotate',\n  'dragPan',\n  'keyboard',\n  'doubleClickZoom',\n  'touchZoomRotate',\n  'touchPitch'\n];\n\n/**\n * A wrapper for mapbox-gl's Map class\n */\nexport default class Mapbox {\n  private _MapClass: typeof MapboxMap;\n  // mapboxgl.Map instance. Not using type here because we are accessing\n  // private members and methods\n  private _map: any = null;\n  // User-supplied props\n  props: MapboxProps;\n\n  // Mapbox map is stateful.\n  // During method calls/user interactions, map.transform is mutated and\n  // deviate from user-supplied props.\n  // In order to control the map reactively, we shadow the transform\n  // with the one below, which reflects the view state resolved from\n  // both user-supplied props and the underlying state\n  private _renderTransform: Transform;\n\n  // Internal states\n  private _internalUpdate: boolean = false;\n  private _inRender: boolean = false;\n  private _hoveredFeatures: MapboxGeoJSONFeature[] = null;\n  private _deferredEvents: {\n    move: boolean;\n    zoom: boolean;\n    pitch: boolean;\n    rotate: boolean;\n  } = {\n    move: false,\n    zoom: false,\n    pitch: false,\n    rotate: false\n  };\n\n  static savedMaps: Mapbox[] = [];\n\n  constructor(MapClass: typeof MapboxMap, props: MapboxProps, container: HTMLDivElement) {\n    this._MapClass = MapClass;\n    this.props = props;\n    this._initialize(container);\n  }\n\n  get map(): MapboxMap {\n    return this._map as MapboxMap;\n  }\n\n  get transform(): Transform {\n    return this._renderTransform;\n  }\n\n  setProps(props: MapboxProps) {\n    const oldProps = this.props;\n    this.props = props;\n\n    const settingsChanged = this._updateSettings(props, oldProps);\n    if (settingsChanged) {\n      this._renderTransform = cloneTransform(this._map.transform);\n    }\n    const sizeChanged = this._updateSize(props);\n    const viewStateChanged = this._updateViewState(props, true);\n    this._updateStyle(props, oldProps);\n    this._updateStyleComponents(props, oldProps);\n    this._updateHandlers(props, oldProps);\n\n    // If 1) view state has changed to match props and\n    //    2) the props change is not triggered by map events,\n    // it's driven by an external state change. Redraw immediately\n    if (settingsChanged || sizeChanged || (viewStateChanged && !this._map.isMoving())) {\n      this.redraw();\n    }\n  }\n\n  static reuse(props: MapboxProps, container: HTMLDivElement) {\n    const that = Mapbox.savedMaps.pop();\n    if (!that) {\n      return null;\n    }\n\n    const map = that.map;\n    // When reusing the saved map, we need to reparent the map(canvas) and other child nodes\n    // intoto the new container from the props.\n    // Step1: reparenting child nodes from old container to new container\n    const oldContainer = map.getContainer();\n    container.className = oldContainer.className;\n    while (oldContainer.childNodes.length > 0) {\n      container.appendChild(oldContainer.childNodes[0]);\n    }\n    // Step2: replace the internal container with new container from the react component\n    // @ts-ignore\n    map._container = container;\n\n    // Step 3: apply new props\n    if (props.initialViewState) {\n      that._updateViewState(props.initialViewState, false);\n    }\n    map.resize();\n    that.setProps({...props, styleDiffing: false});\n\n    // Simulate load event\n    if (map.isStyleLoaded()) {\n      map.fire('load');\n    } else {\n      map.once('styledata', () => map.fire('load'));\n    }\n    return that;\n  }\n\n  /* eslint-disable complexity,max-statements */\n  _initialize(container: HTMLDivElement) {\n    const {props} = this;\n    const mapOptions = {\n      ...props,\n      ...props.initialViewState,\n      accessToken: props.mapboxAccessToken || getAccessTokenFromEnv() || null,\n      container,\n      style: normalizeStyle(props.mapStyle)\n    };\n\n    const viewState = mapOptions.initialViewState || mapOptions.viewState || mapOptions;\n    Object.assign(mapOptions, {\n      center: [viewState.longitude || 0, viewState.latitude || 0],\n      zoom: viewState.zoom || 0,\n      pitch: viewState.pitch || 0,\n      bearing: viewState.bearing || 0\n    });\n\n    if (props.gl) {\n      // eslint-disable-next-line\n      const getContext = HTMLCanvasElement.prototype.getContext;\n      // Hijack canvas.getContext to return our own WebGLContext\n      // This will be called inside the mapboxgl.Map constructor\n      // @ts-expect-error\n      HTMLCanvasElement.prototype.getContext = () => {\n        // Unhijack immediately\n        HTMLCanvasElement.prototype.getContext = getContext;\n        return props.gl;\n      };\n    }\n\n    const map: any = new this._MapClass(mapOptions);\n    // Props that are not part of constructor options\n    if (viewState.padding) {\n      map.setPadding(viewState.padding);\n    }\n    if (props.cursor) {\n      map.getCanvas().style.cursor = props.cursor;\n    }\n    this._renderTransform = cloneTransform(map.transform);\n\n    // Hack\n    // Insert code into map's render cycle\n    const renderMap = map._render;\n    map._render = (arg: number) => {\n      this._inRender = true;\n      renderMap.call(map, arg);\n      this._inRender = false;\n    };\n    const runRenderTaskQueue = map._renderTaskQueue.run;\n    map._renderTaskQueue.run = (arg: number) => {\n      runRenderTaskQueue.call(map._renderTaskQueue, arg);\n      this._onBeforeRepaint();\n    };\n    map.on('render', () => this._onAfterRepaint());\n    // Insert code into map's event pipeline\n    const fireEvent = map.fire;\n    map.fire = this._fireEvent.bind(this, fireEvent);\n\n    // add listeners\n    map.on('resize', () => {\n      this._renderTransform.resize(map.transform.width, map.transform.height);\n    });\n    map.on('styledata', () => this._updateStyleComponents(this.props, {}));\n    map.on('sourcedata', () => this._updateStyleComponents(this.props, {}));\n    for (const eventName in pointerEvents) {\n      map.on(eventName, this._onPointerEvent);\n    }\n    for (const eventName in cameraEvents) {\n      map.on(eventName, this._onCameraEvent);\n    }\n    for (const eventName in otherEvents) {\n      map.on(eventName, this._onEvent);\n    }\n    this._map = map;\n  }\n  /* eslint-enable complexity,max-statements */\n\n  recycle() {\n    Mapbox.savedMaps.push(this);\n  }\n\n  destroy() {\n    this._map.remove();\n  }\n\n  // Force redraw the map now. Typically resize() and jumpTo() is reflected in the next\n  // render cycle, which is managed by Mapbox's animation loop.\n  // This removes the synchronization issue caused by requestAnimationFrame.\n  redraw() {\n    const map = this._map;\n    // map._render will throw error if style does not exist\n    // https://github.com/mapbox/mapbox-gl-js/blob/fb9fc316da14e99ff4368f3e4faa3888fb43c513\n    //   /src/ui/map.js#L1834\n    if (!this._inRender && map.style) {\n      // cancel the scheduled update\n      if (map._frame) {\n        map._frame.cancel();\n        map._frame = null;\n      }\n      // the order is important - render() may schedule another update\n      map._render();\n    }\n  }\n\n  /* Trigger map resize if size is controlled\n     @param {object} nextProps\n     @returns {bool} true if size has changed\n   */\n  _updateSize(nextProps: MapboxProps): boolean {\n    // Check if size is controlled\n    const {viewState} = nextProps;\n    if (viewState) {\n      const map = this._map;\n      if (viewState.width !== map.transform.width || viewState.height !== map.transform.height) {\n        map.resize();\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Adapted from map.jumpTo\n  /* Update camera to match props\n     @param {object} nextProps\n     @param {bool} triggerEvents - should fire camera events\n     @returns {bool} true if anything is changed\n   */\n  _updateViewState(nextProps: MapboxProps, triggerEvents: boolean): boolean {\n    if (this._internalUpdate) {\n      return false;\n    }\n    const map = this._map;\n\n    const tr = this._renderTransform;\n    // Take a snapshot of the transform before mutation\n    const {zoom, pitch, bearing} = tr;\n    const changed = applyViewStateToTransform(tr, {\n      ...transformToViewState(map.transform),\n      ...nextProps\n    });\n\n    if (changed && triggerEvents) {\n      const deferredEvents = this._deferredEvents;\n      // Delay DOM control updates to the next render cycle\n      deferredEvents.move = true;\n      deferredEvents.zoom ||= zoom !== tr.zoom;\n      deferredEvents.rotate ||= bearing !== tr.bearing;\n      deferredEvents.pitch ||= pitch !== tr.pitch;\n    }\n\n    // Avoid manipulating the real transform when interaction/animation is ongoing\n    // as it would interfere with Mapbox's handlers\n    if (!map.isMoving()) {\n      applyViewStateToTransform(map.transform, nextProps);\n    }\n\n    return changed;\n  }\n\n  /* Update camera constraints and projection settings to match props\n     @param {object} nextProps\n     @param {object} currProps\n     @returns {bool} true if anything is changed\n   */\n  _updateSettings(nextProps: MapboxProps, currProps: MapboxProps): boolean {\n    const map = this._map;\n    let changed = false;\n    for (const propName of settingNames) {\n      if (propName in nextProps && !deepEqual(nextProps[propName], currProps[propName])) {\n        changed = true;\n        map[`set${propName[0].toUpperCase()}${propName.slice(1)}`](nextProps[propName]);\n      }\n    }\n    return changed;\n  }\n\n  /* Update map style to match props\n     @param {object} nextProps\n     @param {object} currProps\n     @returns {bool} true if style is changed\n   */\n  _updateStyle(nextProps: MapboxProps, currProps: MapboxProps): boolean {\n    if (nextProps.cursor !== currProps.cursor) {\n      this._map.getCanvas().style.cursor = nextProps.cursor;\n    }\n    if (nextProps.mapStyle !== currProps.mapStyle) {\n      const options: any = {\n        diff: nextProps.styleDiffing\n      };\n      if ('localIdeographFontFamily' in nextProps) {\n        options.localIdeographFontFamily = nextProps.localIdeographFontFamily;\n      }\n      this._map.setStyle(normalizeStyle(nextProps.mapStyle), options);\n      return true;\n    }\n    return false;\n  }\n\n  /* Update fog, light and terrain to match props\n     @param {object} nextProps\n     @param {object} currProps\n     @returns {bool} true if anything is changed\n   */\n  _updateStyleComponents(nextProps: MapboxProps, currProps: MapboxProps): boolean {\n    const map = this._map;\n    let changed = false;\n    if (map.style.loaded()) {\n      if ('light' in nextProps && !deepEqual(nextProps.light, currProps.light)) {\n        changed = true;\n        map.setLight(nextProps.light);\n      }\n      if ('fog' in nextProps && !deepEqual(nextProps.fog, currProps.fog)) {\n        changed = true;\n        map.setFog(nextProps.fog);\n      }\n      if ('terrain' in nextProps && !deepEqual(nextProps.terrain, currProps.terrain)) {\n        if (!nextProps.terrain || map.getSource(nextProps.terrain.source)) {\n          changed = true;\n          map.setTerrain(nextProps.terrain);\n        }\n      }\n    }\n    return changed;\n  }\n\n  /* Update interaction handlers to match props\n     @param {object} nextProps\n     @param {object} currProps\n     @returns {bool} true if anything is changed\n   */\n  _updateHandlers(nextProps: MapboxProps, currProps: MapboxProps): boolean {\n    const map = this._map;\n    let changed = false;\n    for (const propName of handlerNames) {\n      const newValue = nextProps[propName];\n      if (!deepEqual(newValue, currProps[propName])) {\n        changed = true;\n        if (newValue) {\n          map[propName].enable(newValue);\n        } else {\n          map[propName].disable();\n        }\n      }\n    }\n    return changed;\n  }\n\n  _onEvent = (e: MapboxEvent) => {\n    // @ts-ignore\n    const cb = this.props[otherEvents[e.type]];\n    if (cb) {\n      cb(e);\n    }\n  };\n\n  _updateHover(e: MapMouseEvent) {\n    const {props} = this;\n    const shouldTrackHoveredFeatures =\n      props.interactiveLayerIds && (props.onMouseMove || props.onMouseEnter || props.onMouseLeave);\n\n    if (shouldTrackHoveredFeatures) {\n      const eventType = e.type;\n      const wasHovering = this._hoveredFeatures?.length > 0;\n      let features;\n      if (eventType === 'mousemove') {\n        try {\n          features = this._map.queryRenderedFeatures(e.point, {\n            layers: props.interactiveLayerIds\n          });\n        } catch {\n          features = [];\n        }\n      } else {\n        features = [];\n      }\n      const isHovering = features.length > 0;\n\n      if (!isHovering && wasHovering) {\n        e.type = 'mouseleave';\n        this._onPointerEvent(e);\n      }\n      this._hoveredFeatures = features;\n      if (isHovering && !wasHovering) {\n        e.type = 'mouseenter';\n        this._onPointerEvent(e);\n      }\n      e.type = eventType;\n    } else {\n      this._hoveredFeatures = null;\n    }\n  }\n\n  _onPointerEvent = (e: MapLayerMouseEvent | MapLayerTouchEvent) => {\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      this._updateHover(e);\n    }\n\n    // @ts-ignore\n    const cb = this.props[pointerEvents[e.type]];\n    if (cb) {\n      if (this.props.interactiveLayerIds && e.type !== 'mouseover' && e.type !== 'mouseout') {\n        const features =\n          this._hoveredFeatures ||\n          this._map.queryRenderedFeatures(e.point, {\n            layers: this.props.interactiveLayerIds\n          });\n        if (!features.length) {\n          return;\n        }\n        e.features = features;\n      }\n      cb(e);\n      delete e.features;\n    }\n  };\n\n  _onCameraEvent = (e: ViewStateChangeEvent) => {\n    if (!this._internalUpdate) {\n      // @ts-ignore\n      const cb = this.props[cameraEvents[e.type]];\n      if (cb) {\n        cb(e);\n      }\n    }\n    if (e.type in this._deferredEvents) {\n      this._deferredEvents[e.type] = false;\n    }\n  };\n\n  _fireEvent(baseFire: Function, event: string | MapboxEvent, properties?: object) {\n    const map = this._map;\n    const tr = map.transform;\n\n    const eventType = typeof event === 'string' ? event : event.type;\n    if (eventType === 'move') {\n      this._updateViewState(this.props, false);\n    }\n    if (eventType in cameraEvents) {\n      if (typeof event === 'object') {\n        (event as ViewStateChangeEvent).viewState = transformToViewState(tr);\n      }\n      if (this._map.isMoving()) {\n        // Replace map.transform with ours during the callbacks\n        map.transform = this._renderTransform;\n        baseFire.call(map, event, properties);\n        map.transform = tr;\n\n        return map;\n      }\n    }\n    baseFire.call(map, event, properties);\n\n    return map;\n  }\n\n  // All camera manipulations are complete, ready to repaint\n  _onBeforeRepaint() {\n    const map = this._map;\n\n    // If there are camera changes driven by props, invoke camera events so that DOM controls are synced\n    this._internalUpdate = true;\n    for (const eventType in this._deferredEvents) {\n      if (this._deferredEvents[eventType]) {\n        map.fire(eventType);\n      }\n    }\n    this._internalUpdate = false;\n\n    const tr = this._map.transform;\n    // Make sure camera matches the current props\n    this._map.transform = this._renderTransform;\n    this._map.painter.transform = this._renderTransform;\n\n    this._onAfterRepaint = () => {\n      // Terrain is updated during render\n      if ((tr.elevation = this._renderTransform.elevation)) {\n        tr.updateElevation(false);\n      }\n      // Restores camera state before render/load events are fired\n      this._map.transform = tr;\n    };\n  }\n\n  _onAfterRepaint: () => void;\n}\n\n/**\n * Access token can be provided via one of:\n *   mapboxAccessToken prop\n *   access_token query parameter\n *   MapboxAccessToken environment variable\n *   REACT_APP_MAPBOX_ACCESS_TOKEN environment variable\n * @returns access token\n */\nfunction getAccessTokenFromEnv(): string {\n  let accessToken = null;\n\n  /* global location, process */\n  if (typeof location !== 'undefined') {\n    const match = /access_token=([^&\\/]*)/.exec(location.search);\n    accessToken = match && match[1];\n  }\n\n  // Note: This depends on bundler plugins (e.g. webpack) importing environment correctly\n  try {\n    accessToken = accessToken || process.env.MapboxAccessToken;\n  } catch {\n    // ignore\n  }\n\n  try {\n    accessToken = accessToken || process.env.REACT_APP_MAPBOX_ACCESS_TOKEN;\n  } catch {\n    // ignore\n  }\n\n  return accessToken;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}