{"ast":null,"code":"import { Geo } from \"@aws-amplify/geo\";\nimport { COLOR_WHITE, MARKER_COLOR } from \"./constants\";\nimport { isGeoJsonSource } from \"./utils\";\nimport { FONT_DEFAULT_BY_STYLE } from \"./constants\";\nexport function drawClusterLayer(sourceName, map, _ref, mapStyle) {\n  var _ref$fillColor = _ref.fillColor,\n    markerColor = _ref$fillColor === void 0 ? MARKER_COLOR : _ref$fillColor,\n    _ref$smCircleSize = _ref.smCircleSize,\n    smallSize = _ref$smCircleSize === void 0 ? 60 : _ref$smCircleSize,\n    _ref$smThreshold = _ref.smThreshold,\n    smallThreshold = _ref$smThreshold === void 0 ? 50 : _ref$smThreshold,\n    _ref$mdCircleSize = _ref.mdCircleSize,\n    mediumSize = _ref$mdCircleSize === void 0 ? 100 : _ref$mdCircleSize,\n    _ref$mdThreshold = _ref.mdThreshold,\n    mediumThreshold = _ref$mdThreshold === void 0 ? 100 : _ref$mdThreshold,\n    _ref$lgCircleSize = _ref.lgCircleSize,\n    largeSize = _ref$lgCircleSize === void 0 ? 140 : _ref$lgCircleSize,\n    _ref$lgThreshold = _ref.lgThreshold,\n    largeThreshold = _ref$lgThreshold === void 0 ? 500 : _ref$lgThreshold,\n    _ref$xlCircleSize = _ref.xlCircleSize,\n    extraLargeSize = _ref$xlCircleSize === void 0 ? 180 : _ref$xlCircleSize,\n    _ref$borderWidth = _ref.borderWidth,\n    borderWidth = _ref$borderWidth === void 0 ? 4 : _ref$borderWidth,\n    _ref$borderColor = _ref.borderColor,\n    borderColor = _ref$borderColor === void 0 ? COLOR_WHITE : _ref$borderColor,\n    clusterPaint = _ref.clusterPaint,\n    onClick = _ref.onClick,\n    showCount = _ref.showCount,\n    clusterCountLayout = _ref.clusterCountLayout,\n    _ref$fontColor = _ref.fontColor,\n    fontColor = _ref$fontColor === void 0 ? COLOR_WHITE : _ref$fontColor;\n  var clusterLayerId = \"\".concat(sourceName, \"-layer-clusters\");\n  var clusterSymbolLayerId = \"\".concat(sourceName, \"-layer-cluster-count\");\n  // Use step expressions for clusters (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)\n  var paintOptions = Object.assign({\n    \"circle-color\": [\"step\", [\"get\", \"point_count\"], markerColor, smallThreshold, markerColor, mediumThreshold, markerColor, largeThreshold, markerColor],\n    \"circle-radius\": [\"step\", [\"get\", \"point_count\"], smallSize, smallThreshold, mediumSize, mediumThreshold, largeSize, largeThreshold, extraLargeSize],\n    \"circle-stroke-width\": borderWidth,\n    \"circle-stroke-color\": borderColor\n  }, clusterPaint);\n  var defaultClusterLayer = {\n    id: clusterLayerId,\n    type: \"circle\",\n    source: sourceName,\n    filter: [\"has\", \"point_count\"],\n    paint: paintOptions\n  };\n  map.addLayer(Object.assign({}, defaultClusterLayer));\n  /*\n   * Inspect cluster on click\n   */\n  map.on(\"click\", clusterLayerId, function (e) {\n    if (typeof onClick === \"function\") onClick(e);\n    var features = map.queryRenderedFeatures(e.point, {\n      layers: [clusterLayerId]\n    });\n    var clusterId = features[0].properties.cluster_id;\n    var source = map.getSource(sourceName);\n    if (isGeoJsonSource(source)) {\n      source.getClusterExpansionZoom(clusterId, function (err, zoom) {\n        if (err) return;\n        map.easeTo({\n          center: features[0].geometry.coordinates,\n          zoom: zoom\n        });\n      });\n    }\n  });\n  /*\n   * Symbol Layer for cluster point count\n   */\n  if (showCount) {\n    var defaultLayoutOptions = {\n      \"text-field\": \"{point_count_abbreviated}\",\n      \"text-size\": 24\n    };\n    var locationServiceStyle = mapStyle || Geo.getDefaultMap().style;\n    if (locationServiceStyle) {\n      defaultLayoutOptions[\"text-font\"] = [FONT_DEFAULT_BY_STYLE[locationServiceStyle]];\n    }\n    var layoutOptions = Object.assign(Object.assign({}, defaultLayoutOptions), clusterCountLayout);\n    var _paintOptions = {\n      \"text-color\": fontColor\n    };\n    var defaultClusterCount = {\n      id: clusterSymbolLayerId,\n      type: \"symbol\",\n      source: sourceName,\n      filter: [\"has\", \"point_count\"],\n      layout: layoutOptions,\n      paint: _paintOptions\n    };\n    map.addLayer(Object.assign({}, defaultClusterCount));\n  }\n  return {\n    clusterLayerId: clusterLayerId,\n    clusterSymbolLayerId: clusterSymbolLayerId\n  };\n}","map":{"version":3,"names":["Geo","COLOR_WHITE","MARKER_COLOR","isGeoJsonSource","FONT_DEFAULT_BY_STYLE","drawClusterLayer","sourceName","map","mapStyle","fillColor","markerColor","smCircleSize","smallSize","smThreshold","smallThreshold","mdCircleSize","mediumSize","mdThreshold","mediumThreshold","lgCircleSize","largeSize","lgThreshold","largeThreshold","xlCircleSize","extraLargeSize","borderWidth","borderColor","clusterPaint","onClick","showCount","clusterCountLayout","fontColor","clusterLayerId","clusterSymbolLayerId","paintOptions","Object","assign","defaultClusterLayer","id","type","source","filter","paint","addLayer","on","e","features","queryRenderedFeatures","point","layers","clusterId","properties","cluster_id","getSource","getClusterExpansionZoom","err","zoom","easeTo","center","geometry","coordinates","defaultLayoutOptions","locationServiceStyle","getDefaultMap","style","layoutOptions","defaultClusterCount","layout"],"sources":["/Users/carterbrewer/Downloads/trucker_app-main/node_modules/maplibre-gl-js-amplify/lib/esm/drawClusterLayer.js"],"sourcesContent":["import { Geo } from \"@aws-amplify/geo\";\nimport { COLOR_WHITE, MARKER_COLOR } from \"./constants\";\nimport { isGeoJsonSource } from \"./utils\";\nimport { FONT_DEFAULT_BY_STYLE } from \"./constants\";\nexport function drawClusterLayer(sourceName, map, { fillColor: markerColor = MARKER_COLOR, smCircleSize: smallSize = 60, smThreshold: smallThreshold = 50, mdCircleSize: mediumSize = 100, mdThreshold: mediumThreshold = 100, lgCircleSize: largeSize = 140, lgThreshold: largeThreshold = 500, xlCircleSize: extraLargeSize = 180, borderWidth = 4, borderColor = COLOR_WHITE, clusterPaint, onClick, showCount, clusterCountLayout, fontColor = COLOR_WHITE, }, mapStyle) {\n    const clusterLayerId = `${sourceName}-layer-clusters`;\n    const clusterSymbolLayerId = `${sourceName}-layer-cluster-count`;\n    // Use step expressions for clusters (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)\n    const paintOptions = Object.assign({ \"circle-color\": [\n            \"step\",\n            [\"get\", \"point_count\"],\n            markerColor,\n            smallThreshold,\n            markerColor,\n            mediumThreshold,\n            markerColor,\n            largeThreshold,\n            markerColor,\n        ], \"circle-radius\": [\n            \"step\",\n            [\"get\", \"point_count\"],\n            smallSize,\n            smallThreshold,\n            mediumSize,\n            mediumThreshold,\n            largeSize,\n            largeThreshold,\n            extraLargeSize,\n        ], \"circle-stroke-width\": borderWidth, \"circle-stroke-color\": borderColor }, clusterPaint);\n    const defaultClusterLayer = {\n        id: clusterLayerId,\n        type: \"circle\",\n        source: sourceName,\n        filter: [\"has\", \"point_count\"],\n        paint: paintOptions,\n    };\n    map.addLayer(Object.assign({}, defaultClusterLayer));\n    /*\n     * Inspect cluster on click\n     */\n    map.on(\"click\", clusterLayerId, function (e) {\n        if (typeof onClick === \"function\")\n            onClick(e);\n        const features = map.queryRenderedFeatures(e.point, {\n            layers: [clusterLayerId],\n        });\n        const clusterId = features[0].properties.cluster_id;\n        const source = map.getSource(sourceName);\n        if (isGeoJsonSource(source)) {\n            source.getClusterExpansionZoom(clusterId, function (err, zoom) {\n                if (err)\n                    return;\n                map.easeTo({\n                    center: features[0].geometry.coordinates,\n                    zoom: zoom,\n                });\n            });\n        }\n    });\n    /*\n     * Symbol Layer for cluster point count\n     */\n    if (showCount) {\n        const defaultLayoutOptions = {\n            \"text-field\": \"{point_count_abbreviated}\",\n            \"text-size\": 24,\n        };\n        const locationServiceStyle = mapStyle || Geo.getDefaultMap().style;\n        if (locationServiceStyle) {\n            defaultLayoutOptions[\"text-font\"] = [\n                FONT_DEFAULT_BY_STYLE[locationServiceStyle],\n            ];\n        }\n        const layoutOptions = Object.assign(Object.assign({}, defaultLayoutOptions), clusterCountLayout);\n        const paintOptions = {\n            \"text-color\": fontColor,\n        };\n        const defaultClusterCount = {\n            id: clusterSymbolLayerId,\n            type: \"symbol\",\n            source: sourceName,\n            filter: [\"has\", \"point_count\"],\n            layout: layoutOptions,\n            paint: paintOptions,\n        };\n        map.addLayer(Object.assign({}, defaultClusterCount));\n    }\n    return { clusterLayerId, clusterSymbolLayerId };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}